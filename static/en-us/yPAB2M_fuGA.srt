1
00:00:00,818 --> 00:00:08,670
So Martin then does is express these steps using a UML collaboration diagram.

2
00:00:08,670 --> 00:00:10,830
We called that a collaboration diagram.

3
00:00:10,830 --> 00:00:12,800
Was like an object diagram.

4
00:00:12,800 --> 00:00:18,490
But the lines between the objects indicated our operations.

5
00:00:18,490 --> 00:00:22,540
And the lines were numbered indicating the order of the operations.

6
00:00:22,540 --> 00:00:28,820
So in this case, we had the steps of user interface getting,

7
00:00:28,820 --> 00:00:31,710
getting the request from the user with the brew button, and

8
00:00:31,710 --> 00:00:36,420
then asking the hot water source for whether it's ready.

9
00:00:36,420 --> 00:00:39,720
And then asking if the containment vessel whether it's ready,

10
00:00:39,720 --> 00:00:44,520
and then starting the hot water source heating up the water.

11
00:00:44,520 --> 00:00:48,230
So there's three steps labeled one, two, and three here.

12
00:00:48,230 --> 00:00:51,270
And we can see that there's, there ought to

13
00:00:51,270 --> 00:00:57,089
be at least three classes supported to deal with those three possibilities.

14
00:00:58,760 --> 00:01:01,870
>> Is it possible here for this diagram to be more descriptive?

15
00:01:01,870 --> 00:01:06,520
In the sense that, it seems like when you ask the ho, hot water source.

16
00:01:06,520 --> 00:01:07,840
Is it ready or not?

17
00:01:07,840 --> 00:01:09,500
If it says it is ready,

18
00:01:09,500 --> 00:01:13,270
then you might make the next check to see if the containment vessel's ready.

19
00:01:13,270 --> 00:01:16,850
But if it says no, it seems like a whole another steps set of

20
00:01:16,850 --> 00:01:19,140
steps may have to be taken to indicate to the user hey.

21
00:01:20,210 --> 00:01:22,640
The water source, hot and ready to go.

22
00:01:22,640 --> 00:01:27,680
>> Okay so remember that a use case, or a representation of a use case in

23
00:01:27,680 --> 00:01:32,600
a collaboration diagram or a sequence diagram is not contingent.

24
00:01:32,600 --> 00:01:37,970
Okay, it's, it's one step by step walk through the system.

25
00:01:37,970 --> 00:01:41,500
And what we're going to have to do is to deal with contingencies which

26
00:01:41,500 --> 00:01:43,790
are obviously an important part of this whole process.

27
00:01:43,790 --> 00:01:46,290
We're going to have to have multiple diagrams.

28
00:01:46,290 --> 00:01:49,030
And one of the things that Martin does is suggest that we can

29
00:01:49,030 --> 00:01:51,140
add together those diagrams.

30
00:01:51,140 --> 00:01:53,050
So, I think that maybe is where you're going.

31
00:01:53,050 --> 00:01:55,010
We want to have them, them all there.

32
00:01:55,010 --> 00:01:57,980
But, wha, what we'll do them a step at a time, so to speak.

33
00:01:57,980 --> 00:02:01,930
>> So we would have, I guess a use-case symbol user-presses brew button and

34
00:02:01,930 --> 00:02:03,630
a water vessel is not ready.

35
00:02:03,630 --> 00:02:05,650
Like, that would be a separate use case and

36
00:02:05,650 --> 00:02:08,690
we can model and tie that in later with this situation,

37
00:02:08,690 --> 00:02:11,500
which seems like we're pressing brew and everything's ready to go.

38
00:02:11,500 --> 00:02:12,530
>> That's where we're going.
