1
00:00:00,270 --> 00:00:02,670
Now we're going to talk
about sending messages.

2
00:00:02,670 --> 00:00:04,360
These are much simpler than data items,

3
00:00:04,360 --> 00:00:08,200
in that they encode simple byte arrays,
and there are no guarantees of delivery.

4
00:00:08,200 --> 00:00:11,020
If you send a message on a remote
device that's not connected or

5
00:00:11,020 --> 00:00:13,310
out of range,
then the message will be lost.

6
00:00:13,310 --> 00:00:16,120
It's your responsibility to deal
with this, and use messages and

7
00:00:16,120 --> 00:00:19,360
scenarios where they can be
lost without causing a failure.

8
00:00:19,360 --> 00:00:21,460
Here's an example of
how to send a message.

9
00:00:21,460 --> 00:00:24,160
You can see here that we
use the sendMessage call.

10
00:00:24,160 --> 00:00:27,600
This is a bit different than data items
in that we need to specify the ID of

11
00:00:27,600 --> 00:00:30,700
the node to send to,
a path representing the message, and

12
00:00:30,700 --> 00:00:32,509
a byte array of any
content we want to send.

13
00:00:32,509 --> 00:00:35,060
Note that you should ensure that
the byte array is limited to

14
00:00:35,060 --> 00:00:36,220
about 100 kilobytes.

15
00:00:36,220 --> 00:00:38,310
Otherwise you'll get an error
code returned if you try to

16
00:00:38,310 --> 00:00:39,990
exceed the internal limites.

17
00:00:39,990 --> 00:00:42,720
So you may be wondering about
where we get our node ID from.

18
00:00:42,720 --> 00:00:45,520
There is a method called
getConnectedNodes that can return a list

19
00:00:45,520 --> 00:00:46,890
of nodes that are available.

20
00:00:46,890 --> 00:00:49,500
We use the A-weight method to
make the call immediately and

21
00:00:49,500 --> 00:00:52,040
it will block until the list
is available to you.

22
00:00:52,040 --> 00:00:55,272
This cannot be done on the UI thread,
however, because it blocks.

23
00:00:55,272 --> 00:00:57,850
Once A-weight returns,
then you can do a loop on the list and

24
00:00:57,850 --> 00:00:59,752
do whatever you want with each node ID.

25
00:00:59,752 --> 00:01:02,630
Such as sending a message to each
node using the previous code that

26
00:01:02,630 --> 00:01:03,390
we just showed.

27
00:01:03,390 --> 00:01:05,600
So these are the building blocks for
sending messages.

28
00:01:05,600 --> 00:01:07,600
And you can see the API is very simple.

29
00:01:07,600 --> 00:01:09,350
How do we go about receiving messages?

30
00:01:09,350 --> 00:01:12,480
Well, we can put that in
our myservice.java file.

31
00:01:12,480 --> 00:01:16,540
What we do is overwrite another method
on message received, which is also

32
00:01:16,540 --> 00:01:20,540
defined in wearable listener service,
similar to what we did for data items.

33
00:01:20,540 --> 00:01:24,010
This method is passed in a message
event, and you can retrieve the path of

34
00:01:24,010 --> 00:01:26,900
the message, with getPath, and
the byte array using getData
