1
00:00:00,770 --> 00:00:03,960
There is a whole lot to
know about Android testing.

2
00:00:03,960 --> 00:00:05,400
Honestly, we could, and

3
00:00:05,400 --> 00:00:08,610
probably should, make an entire
course on how to do it well.

4
00:00:08,610 --> 00:00:11,720
Let's just look into
how to run tests and

5
00:00:11,720 --> 00:00:14,540
when to use unit tests
versus connected tests.

6
00:00:15,730 --> 00:00:19,150
We've defined a super simple
project with this class Echo.

7
00:00:19,150 --> 00:00:22,560
It has a method that just returns
whatever you put into it.

8
00:00:22,560 --> 00:00:25,360
It also has another version
of Echo where it first

9
00:00:25,360 --> 00:00:28,780
logs whatever you input and
then returns it.

10
00:00:28,780 --> 00:00:31,716
We've also added a product
flavor to this project.

11
00:00:31,716 --> 00:00:36,240
In the paid folder, we've got
paid Echo which does essentially

12
00:00:36,240 --> 00:00:40,030
the same thing but for
collections instead of single objects.

13
00:00:40,030 --> 00:00:43,980
So we have this collection echo that
echos back whatever you put in.

14
00:00:43,980 --> 00:00:48,040
And then this version of echo that
first logs each item that you put in.

15
00:00:48,040 --> 00:00:51,930
So, we have defined some
tests in the test directory.

16
00:00:51,930 --> 00:00:56,430
These are JUnit tests and so we just
verify that echo is in fact behaving how

17
00:00:56,430 --> 00:01:00,730
we expect and that the logging version
of echo is behaving how we expect.

18
00:01:00,730 --> 00:01:04,790
To test the paid flavor,
in the testPaid folder,

19
00:01:04,790 --> 00:01:07,810
we have another pair of
extremely simple JUnit tests

20
00:01:07,810 --> 00:01:12,060
that just verify that the echo of
the collection works as expected.

21
00:01:12,060 --> 00:01:16,190
And that the echoing of the collection
with logging works as expected.

22
00:01:16,190 --> 00:01:18,060
All of this code is in
the course repository, so

23
00:01:18,060 --> 00:01:19,770
you can get a closer look there.

24
00:01:19,770 --> 00:01:23,530
If we open up the Gradle pane,
and run the check task.

25
00:01:23,530 --> 00:01:25,315
Let's see what happens
when we run these tests.

26
00:01:25,315 --> 00:01:28,870
Uh-oh, we have failing tests.

27
00:01:28,870 --> 00:01:32,250
We can check out the report at this
file path to see what went wrong.

28
00:01:33,370 --> 00:01:40,420
So here we are at app> build > reports
> tests > freeDebug > Index.html.

29
00:01:40,420 --> 00:01:41,810
And here's our report
of what went wrong.

30
00:01:42,850 --> 00:01:47,020
Let's see Method i in
android.util.log not mocked.

31
00:01:47,020 --> 00:01:49,010
So I think I know what's
going wrong here.

32
00:01:49,010 --> 00:01:52,680
We tried to use the Android
logger from a unit test.

33
00:01:52,680 --> 00:01:55,730
Now, the Android framework doesn't exist
when we're running unit tests since

34
00:01:55,730 --> 00:01:57,840
those are being run
on the local machine.

35
00:01:57,840 --> 00:02:01,260
If we want to test something that
is accessing the Android framework,

36
00:02:01,260 --> 00:02:03,730
we have to run those on the device.

37
00:02:03,730 --> 00:02:07,670
Let's move those into connected
tests instead of unit tests.

38
00:02:07,670 --> 00:02:11,709
So we'll comment out the tests that
require the Android framework,

39
00:02:11,709 --> 00:02:14,035
comment this one out too, and

40
00:02:14,035 --> 00:02:17,425
now we'll added our connected to
test to the Android test directory.

41
00:02:17,425 --> 00:02:22,235
Note that this is an Android test
case now instead of a JUnit test, and

42
00:02:22,235 --> 00:02:26,860
we can add our paid tests to
the Android test paid directory.

43
00:02:26,860 --> 00:02:33,010
Now if we open up the Gradle pane, and
run connected check, and there we go.

44
00:02:33,010 --> 00:02:35,820
The tests that require accessing
the Android framework will run

45
00:02:35,820 --> 00:02:38,310
on the device, where the Android
framework is available.

46
00:02:38,310 --> 00:02:39,180
And they all pass.
