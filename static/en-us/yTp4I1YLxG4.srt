1
00:00:00,370 --> 00:00:03,130
To get more intuition for
the power of nondeterminism,

2
00:00:03,130 --> 00:00:06,560
let's see how much more efficient
it makes deciding the language of

3
00:00:06,560 --> 00:00:10,510
composite numbers that is
numbers that are not prime.

4
00:00:10,510 --> 00:00:15,210
The task is to decide the set
of string representations of

5
00:00:15,210 --> 00:00:21,210
numbers that are the product of two
positive numbers greater than one.

6
00:00:21,210 --> 00:00:23,683
One deterministic
solution looks like this.

7
00:00:23,683 --> 00:00:27,868
Think of the flow diagram as capturing
various modules within the deterministic

8
00:00:27,868 --> 00:00:29,470
Turing machine.

9
00:00:29,470 --> 00:00:33,230
We start by initializing
some number p to 1,

10
00:00:33,230 --> 00:00:39,080
then we increment it and
test whether P square is greater than x.

11
00:00:39,080 --> 00:00:44,460
If it is, then trying larger values
of p won't help us and we can reject.

12
00:00:44,460 --> 00:00:46,140
If p squared is no larger than x,

13
00:00:46,140 --> 00:00:50,090
however, then we test
to see if p divides x.

14
00:00:50,090 --> 00:00:52,620
If it does, then we accept.

15
00:00:52,620 --> 00:00:56,759
If not, then we go back and
try the next value for p.

16
00:00:56,759 --> 00:01:01,533
Each iteration of this loop requires
a number of steps that is polynomial in

17
00:01:01,533 --> 00:01:05,640
the number of bits used to represent x,
not so bad.

18
00:01:05,640 --> 00:01:10,047
The trouble is that we might end up
needing square root of x iterations of

19
00:01:10,047 --> 00:01:13,058
this outer loop here in
order to find the right p or

20
00:01:13,058 --> 00:01:15,349
to confirm that one doesn't exist.

21
00:01:15,349 --> 00:01:18,820
This is what makes
the deterministic algorithm slow.

22
00:01:18,820 --> 00:01:23,440
Since the value of x is exponential
in its input size, remember that it's

23
00:01:23,440 --> 00:01:28,110
represented in binary, the deterministic
algorithm is exponential.

24
00:01:28,110 --> 00:01:30,840
On the other hand, with nondeterminism,
we can do much better.

25
00:01:32,040 --> 00:01:33,630
We initialize p, so

26
00:01:33,630 --> 00:01:37,410
that's it's represented on its own tape
as the number one written in binary.

27
00:01:38,630 --> 00:01:44,010
We then nondeterministically modify p
by having two possible transitions for

28
00:01:44,010 --> 00:01:46,320
the same state symbol pair.

29
00:01:46,320 --> 00:01:49,923
We can nondeterministically
append a bit to p.

30
00:01:49,923 --> 00:01:50,563
By the way,

31
00:01:50,563 --> 00:01:55,040
I'll mark all the nondeterministic
transitions in orange here.

32
00:01:55,040 --> 00:01:58,530
Next, we check to see if
we've made p too large.

33
00:01:58,530 --> 00:02:02,700
If we did, then there's no point
in continuing, so we reject.

34
00:02:02,700 --> 00:02:06,092
On the other hand, if p is not too big,

35
00:02:06,092 --> 00:02:12,028
then we nondeterministically decide
either to append a zero to p,

36
00:02:12,028 --> 00:02:17,437
append a one to p or to leave p as
it is and go see if it divides x.

37
00:02:17,437 --> 00:02:19,685
If there's some p that divides x,

38
00:02:19,685 --> 00:02:24,280
then some branch of computation
will set p accordingly.

39
00:02:24,280 --> 00:02:27,030
That branch will accept and
so the whole machine will.

40
00:02:28,290 --> 00:02:29,320
On the other hand,

41
00:02:29,320 --> 00:02:34,099
if no such p exists, then no branch will
accept and the machine won't either.

42
00:02:35,110 --> 00:02:37,600
In fact, the machine will always reject,

43
00:02:37,600 --> 00:02:42,642
because every branch of computation will
be rejected in one of these two places.

44
00:02:42,642 --> 00:02:45,514
This nondeterministic
strategy is faster,

45
00:02:45,514 --> 00:02:49,450
because it only requires log x
iterations of this outer loop.

46
00:02:49,450 --> 00:02:54,080
The divisor p is set one bit at a time
and can't use more bits that x,

47
00:02:54,080 --> 00:02:56,743
the number it's supposed to divide.

48
00:02:56,743 --> 00:03:01,338
Thus, while the deterministic algorithm
we came up with exponential in its

49
00:03:01,338 --> 00:03:02,271
input length,

50
00:03:02,271 --> 00:03:06,890
it was fairly easy to come up with a
nondeterministic one that was polynomial
