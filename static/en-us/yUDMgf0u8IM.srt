1
00:00:00,000 --> 00:00:03,000
Okay, now, I would like to go back to the drawing of a software under test

2
00:00:03,000 --> 00:00:06,000
that I feel like I've drawn about 30 times already

3
00:00:06,000 --> 00:00:10,000
and recall that this provides APIs and most of the time that's we're fuzzing.

4
00:00:10,000 --> 00:00:15,000
Now, on the other hand, the software under test uses APIs like the UNIX Recall,

5
00:00:15,000 --> 00:00:19,000
we could do fuzzing at this level as well and this most often called fault injection when we do that

6
00:00:19,000 --> 00:00:22,000
and run a fault injection, as we discussed, is extremely powerful.

7
00:00:22,000 --> 00:00:25,000
We've looked at examples of both of these and both of them are incredibly useful.

8
00:00:25,000 --> 00:00:29,000
What I like to talk about now is fuzzing of the implicit inputs, we talked about unit too,

9
00:00:29,000 --> 00:00:33,000
where we have non-API inputs to the software under test that affect it's behavior

10
00:00:33,000 --> 00:00:36,000
that turns out that this is often pretty important, and so, how we'd do this?

11
00:00:36,000 --> 00:00:40,000
Well, as we mentioned earlier, possibly the most important implicit input is the timing at which

12
00:00:40,000 --> 00:00:42,000
different threads are on different processors.

13
00:00:42,000 --> 00:00:46,000
This is to say the thread scheduler provides a very important form of implicit input

14
00:00:46,000 --> 00:00:48,000
to multithreaded software under test.

15
00:00:48,000 --> 00:00:51,000
An extremely important technique is perturbing the schedule.

16
00:00:51,000 --> 00:00:54,000
And as far as I know, there isn't a single best way to do this,

17
00:00:54,000 --> 00:00:56,000
and so we find in practices, people do a lot of different things.

18
00:00:56,000 --> 00:00:58,000
One thing you can do is just generate load on the machine.

19
00:00:58,000 --> 00:01:02,000
That is to say, make sure that your testing is not happening on the complete idle machine.

20
00:01:02,000 --> 00:01:05,000
It is often the case that if you test software on a completely idle single core machine,

21
00:01:05,000 --> 00:01:10,000
even if it has multiple threads, those threads will be scheduled in a quite deterministic way.

22
00:01:10,000 --> 00:01:13,000
Similarly, if you have a multicore machine that has more processors,

23
00:01:13,000 --> 00:01:17,000
then your application of threads, there is again a strong possibility it will be scheduled

24
00:01:17,000 --> 00:01:20,000
on an extremely deterministic fashion while you're doing testing.

25
00:01:20,000 --> 00:01:23,000
And if they are being scheduled extremely deterministically, that means that the scheduler

26
00:01:23,000 --> 00:01:28,000
is exploring only a very tiny fraction of the full set of possible thread schedules

27
00:01:28,000 --> 00:01:31,000
and what that mean is concurrency bugs are going to go unfound during testing.

28
00:01:31,000 --> 00:01:35,000
So, generating load by running apps--generating load by running other application is important.

29
00:01:35,000 --> 00:01:37,000
Generating network activity on a machine can also be valuable.

30
00:01:37,000 --> 00:01:40,000
And network activity is interesting because incoming network fax machine

31
00:01:40,000 --> 00:01:44,000
caused interrupt handlers to fire and they cause lots of kernel routines to run

32
00:01:44,000 --> 00:01:46,000
It caused cache lines to be stolen away from your application

33
00:01:46,000 --> 00:01:49,000
and this causes some perturbation of the schedule.

34
00:01:49,000 --> 00:01:52,000
There also exist specialized tool for stress testing of multithreaded applications.

35
00:01:52,000 --> 00:01:54,000
And if you have one that is available too,

36
00:01:54,000 --> 00:01:57,000
it would be an extremely good idea to use it to help task your multithreaded code.

37
00:01:57,000 --> 00:02:01,000
Okay, so I discovered is what I will call external pertubation to the threads

38
00:02:01,000 --> 00:02:05,000
Also possible, previous software to introduce perturbations internally and one way to do that

39
00:02:05,000 --> 00:02:09,000
is to do things like concerting delays before and after acquiring locks

40
00:02:09,000 --> 00:02:12,000
and also around accesses to shared variables.

41
00:02:12,000 --> 00:02:16,000
This entails a fairly high cost--this isn't so easy, but on the other hand, it might be useful.

42
00:02:16,000 --> 00:02:19,000
And I heard a story one time, there was about a group of researchers who are working on

43
00:02:19,000 --> 00:02:22,000
formal methods based tools for finding bugs and threaded codes

44
00:02:22,000 --> 00:02:25,000
and these researchers were having some sort of a competition where each of them try to find

45
00:02:25,000 --> 00:02:28,000
the most bugs in the software under test that they could,

46
00:02:28,000 --> 00:02:31,000
and what happened was, somebody showed up and just put a bunch of sleeps inside the application

47
00:02:31,000 --> 00:02:35,000
and showed that they could find just as many bugs as this super heavy weight,

48
00:02:35,000 --> 00:02:37,000
super complicated formal methods tool.

49
00:02:37,000 --> 00:02:41,000
So, the final thing you can try is what I'm going to call "unfriendly emulators."

50
00:02:41,000 --> 00:02:45,000
Put that in qoutes, I kind of just making up that name.

51
00:02:45,000 --> 00:02:49,000
But these are--it's kind of special virtual machine or other run time

52
00:02:49,000 --> 00:02:53,000
that's especially designed to stress test your application by doing things like

53
00:02:53,000 --> 00:02:56,000
invalidating cache lines, invoking thread schedules in odd ways, and other things.

54
00:02:56,000 --> 00:02:59,000
And so, there are some these kind of things generally available,

55
00:02:59,000 --> 00:03:03,000
and if one of them fits the needs of whatever your software under test is, you should definitely use it.
