1
00:00:00,220 --> 00:00:05,740
Now, lets discuss a special kind of
memory resident virus called Rootkit.

2
00:00:05,740 --> 00:00:08,780
A Rootkit is embedded
in an operating system.

3
00:00:08,780 --> 00:00:12,400
It typically modifies some of
the code and even data structures

4
00:00:12,400 --> 00:00:16,750
of the operating system in order to
perform some malicious activities.

5
00:00:16,750 --> 00:00:21,010
For example, a Rootkit can be used
to hide a malware from he user.

6
00:00:21,010 --> 00:00:25,500
For example, when the user uses the
hours command to list the contents of

7
00:00:25,500 --> 00:00:29,570
a directory, the Rootkit can change
the output of the LS command so

8
00:00:29,570 --> 00:00:32,610
that the user will not
see the malware file.

9
00:00:32,610 --> 00:00:35,670
Similarly, when the user
uses the PS command

10
00:00:35,670 --> 00:00:38,760
to see what programs are running
on a system, the Rootkit

11
00:00:38,760 --> 00:00:43,300
can modify the output of the PS command
to hide the running of the malware.

12
00:00:43,300 --> 00:00:47,510
Let's study an example of how Rootkit
can modify the operating system

13
00:00:47,510 --> 00:00:50,250
in order to perform
malicious activities.

14
00:00:50,250 --> 00:00:54,210
For example, the rootkit is trying to
hide the malware file from the user

15
00:00:54,210 --> 00:00:56,940
when he lists the contents
of a directory.

16
00:00:56,940 --> 00:01:01,920
First, let's examine what happens when a
user looks at the files in a directory.

17
00:01:01,920 --> 00:01:05,209
Suppose on Windows,
the user use the command D-I-R, DIR,

18
00:01:05,209 --> 00:01:07,840
for looking at files in a directory.

19
00:01:07,840 --> 00:01:11,350
As we show here this command
can be implemented by a loop

20
00:01:11,350 --> 00:01:15,030
that keeps looking at the next
file in the directory.

21
00:01:15,030 --> 00:01:18,290
Now, let's look at how
a Rootkit can hide a malware

22
00:01:18,290 --> 00:01:21,810
from the user when he looks
at the files in a directory.

23
00:01:21,810 --> 00:01:23,870
We know that files and directories,

24
00:01:23,870 --> 00:01:28,400
they reside on hard drive, which is
controlled by the operating system.

25
00:01:28,400 --> 00:01:29,030
Meaning that,

26
00:01:29,030 --> 00:01:32,940
any access to the hard drive has to
go through the operating system.

27
00:01:32,940 --> 00:01:37,810
Therefore, in order to get informations
about files in the directory we have to

28
00:01:37,810 --> 00:01:42,060
go through operating system functions
in order to get such information.

29
00:01:42,060 --> 00:01:44,980
In other words, operating system
functions are being called

30
00:01:44,980 --> 00:01:48,830
to look at informations about files and
directories on hard drive and

31
00:01:48,830 --> 00:01:51,890
return the results back to the user.

32
00:01:51,890 --> 00:01:55,490
So here is what an operating
system will typically return

33
00:01:55,490 --> 00:01:58,180
when the user looks at
the files in a directory.

34
00:01:58,180 --> 00:02:02,440
That is, suppose the Rootkit is
not embedded in the OS yet, then

35
00:02:02,440 --> 00:02:06,590
the OS will return all the files in the
directory including the malware file,

36
00:02:06,590 --> 00:02:08,758
say mal_code.exe.

37
00:02:08,758 --> 00:02:12,740
And this is the file that the Rootkit
would try to hide from the user.

38
00:02:12,740 --> 00:02:16,550
In order to hide the malware from
the user, what the Rootkit can do

39
00:02:16,550 --> 00:02:19,990
is to intercept any function
call to the operating system.

40
00:02:19,990 --> 00:02:24,470
And then reason whether the call
will end up revealing the malware.

41
00:02:24,470 --> 00:02:25,340
And if no,

42
00:02:25,340 --> 00:02:28,830
it will just pass the call to the
appropriate operating system function.

43
00:02:28,830 --> 00:02:32,900
And if yes, it's going to execute
the call, but intercept the result so

44
00:02:32,900 --> 00:02:37,540
that it can filter out the result as
necessary, in order to hide the malware.

45
00:02:37,540 --> 00:02:40,390
That is the Rootkit intercepts
the function call to

46
00:02:40,390 --> 00:02:41,580
the operating system and

47
00:02:41,580 --> 00:02:46,060
knows that the operating system function
call is looking at files in a directory,

48
00:02:46,060 --> 00:02:50,217
and then it knows that the return
results may contain the malcode.exe.

49
00:02:50,217 --> 00:02:53,310
So the Rootkit will filter
out the file name so

50
00:02:53,310 --> 00:02:57,050
that the user will not see
this file name in the result.

51
00:02:57,050 --> 00:03:00,530
So here you go, when the Rootkit is
embedded in the operating system,

52
00:03:00,530 --> 00:03:02,880
you can filter out the malware file.

53
00:03:02,880 --> 00:03:05,390
So when a user looks at
the files in a directory,

54
00:03:05,390 --> 00:03:07,730
he will not be able to
see the malware and

55
00:03:07,730 --> 00:03:12,110
this is how a root kit in the OS
can hide a malware from the user.

56
00:03:12,110 --> 00:03:15,520
Again, the root kit is able to
accomplish this by modifying

57
00:03:15,520 --> 00:03:16,600
the operating system.

58
00:03:16,600 --> 00:03:20,250
In particular, it intercepts a function
called to the operating system, and

59
00:03:20,250 --> 00:03:22,420
future the result of the function calls.
