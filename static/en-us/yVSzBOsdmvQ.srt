1
00:00:00,630 --> 00:00:04,680
Okay. So the most ideal situation would be, if all instructions that we need to

2
00:00:04,680 --> 00:00:08,860
execute just go through the pipeline in the same stage. So basically, all of,

3
00:00:08,860 --> 00:00:11,960
all of them will end up executing in the same cycle.

4
00:00:11,960 --> 00:00:15,780
Let's see an example of this. So we have a nice table here. And

5
00:00:15,780 --> 00:00:21,390
now we're going to have some five instructions here. So let's have instructions,

6
00:00:21,390 --> 00:00:25,420
so here is where we're basically just going to have our instructions. And

7
00:00:25,420 --> 00:00:31,046
let's say that you know, the first instruction is an ADD instruction. R1 equals

8
00:00:31,046 --> 00:00:36,760
R2 plus R3. I'm going to draw it like this so that we don't have to

9
00:00:36,760 --> 00:00:40,860
actually have the opcodes and everything else clutter the screen. And

10
00:00:40,860 --> 00:00:47,480
then we have R4 equals R1 minus R5.

11
00:00:47,480 --> 00:00:56,486
And then we have xor R6 equals R7 X or R8.

12
00:00:56,486 --> 00:01:02,718
And then we will have R5 equals R8 times R9.

13
00:01:02,718 --> 00:01:09,780
And finally we will have an add of R4 equals R8 plus R9.

14
00:01:09,780 --> 00:01:13,956
So remember these are instructions, not actual C-operations, it's just that I am

15
00:01:13,956 --> 00:01:17,726
kind of showing them like this because it is a more compact representations of

16
00:01:17,726 --> 00:01:22,092
them. And now let's see what happens in a pipeline where we do this for

17
00:01:22,092 --> 00:01:26,209
a five stage pipeline. So in the first cycle, so this is cycle 1,

18
00:01:26,209 --> 00:01:30,529
this will be fetched and this will be fetched and this will be fetched and

19
00:01:30,529 --> 00:01:35,770
this will be fetched and this will be fetched. And then in cycle 2,

20
00:01:35,770 --> 00:01:39,790
we will decode this and read registers, and decode this and read registers, and

21
00:01:39,790 --> 00:01:44,450
decode this and read registers, and so on. And now if you remember your five

22
00:01:44,450 --> 00:01:49,400
stage flight plan, the time comes to execute this thing. So if we just get all

23
00:01:49,400 --> 00:01:55,470
five of them here and execute them. We will have a very good CPI. In reality,

24
00:01:55,470 --> 00:01:59,050
what's going to happen is that we are going to eventually write the results for

25
00:01:59,050 --> 00:02:02,590
all of these things. And if we had more instructions here,

26
00:02:02,590 --> 00:02:07,540
it wouldn't matter. All of this would be done in basically five cycles. So

27
00:02:07,540 --> 00:02:12,640
if we have five cycles for a very large number of instructions, the CPI is going

28
00:02:12,640 --> 00:02:17,760
to be five cycles for pretty much an infinite number of instructions which

29
00:02:17,760 --> 00:02:22,220
is going to be very close to 0. So we get a CPI for 0, which is very good.

30
00:02:22,220 --> 00:02:25,340
You know, you are getting basically 0, almost 0 cycles per instruction. So

31
00:02:25,340 --> 00:02:29,900
that's wonderful. So what's wrong with something like this? Well what's

32
00:02:29,900 --> 00:02:35,100
wrong with it is that when we execute these instructions what has happened

33
00:02:35,100 --> 00:02:39,330
is this instruction and this instruction have red registers at the same time.

34
00:02:39,330 --> 00:02:43,510
Remember that the decode stage is also the read register stage.

35
00:02:43,510 --> 00:02:48,670
So, what happens here is, we are here adding the R2 plus R3.

36
00:02:49,890 --> 00:02:55,630
And here, when we are writing, we are really writing R1. Okay?

37
00:02:55,630 --> 00:03:01,330
But when we are adding here. I mean are subtracting R5 from R1.

38
00:03:01,330 --> 00:03:05,990
This R1 here is not the R1 that this instruction is writing.

39
00:03:05,990 --> 00:03:09,960
It's the R1 that we read before that instruction managed to write anything.

40
00:03:09,960 --> 00:03:13,920
What's wrong with this is that this first instruction is going to execute

41
00:03:13,920 --> 00:03:17,320
correctly, but the second instruction because we are executing it too early,

42
00:03:17,320 --> 00:03:20,420
is going to basically read the R1 from before the first instruction so

43
00:03:20,420 --> 00:03:23,330
it doesn't get the result of the first instruction. So the programmer that wrote

44
00:03:23,330 --> 00:03:29,000
this wanted this R1 to be this R1. It was supposed to be like this, but

45
00:03:29,000 --> 00:03:34,340
it isn't. And that means that we will have to do something about this.

46
00:03:34,340 --> 00:03:36,910
We cannot just let instructions execute in the same cycle.

47
00:03:36,910 --> 00:03:39,380
We actually have to figure out which ones can execute and

48
00:03:39,380 --> 00:03:41,300
which ones cannot execute in the same cycle.
