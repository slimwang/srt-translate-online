1
00:00:00,310 --> 00:00:02,640
Now let's see how well this works when we

2
00:00:02,640 --> 00:00:06,040
have something like a branch that is just always

3
00:00:06,040 --> 00:00:10,521
taken. In that case, the entry for that branch

4
00:00:10,521 --> 00:00:14,479
will just be all ones in the history. That branch

5
00:00:14,479 --> 00:00:16,930
has a fixed PC. It always has the same

6
00:00:16,930 --> 00:00:19,784
history. When we XOR them, we will be using only

7
00:00:19,784 --> 00:00:23,138
one 2-bit counter. So pretty much, although we have

8
00:00:23,138 --> 00:00:25,490
a long history, if the branch is just a repetition

9
00:00:25,490 --> 00:00:27,394
of the same thing, we are ending up using

10
00:00:27,394 --> 00:00:30,817
only one of the 2-bit counters. So the additional cost,

11
00:00:30,817 --> 00:00:33,439
relative to just having an array of 2-bit counters,

12
00:00:33,439 --> 00:00:35,833
is that now we are keeping an 11-bit history for

13
00:00:35,833 --> 00:00:39,125
this branch. So still the cost is not just

14
00:00:39,125 --> 00:00:43,885
2-bits, it's really, let's say 11 or 16-bits plus 2,

15
00:00:43,885 --> 00:00:46,945
but it's much less than a long history plus

16
00:00:46,945 --> 00:00:50,520
2 to the Nth times a 2-bit counter. If we

17
00:00:50,520 --> 00:00:53,150
have a branch that is never taken, we can do

18
00:00:53,150 --> 00:00:58,270
the same reasoning and end up using a single counter.

19
00:00:58,270 --> 00:01:00,922
If we have a branch that has something like NT,

20
00:01:00,922 --> 00:01:04,322
NT, it really only has two possible histories, zero one,

21
00:01:04,322 --> 00:01:07,450
zero one, zero one, etcetera or one zero, one zero,

22
00:01:07,450 --> 00:01:11,810
one zero, etcetera. So it ends up using two counters.

23
00:01:11,810 --> 00:01:13,422
So if we have a lot of these counters as

24
00:01:13,422 --> 00:01:16,210
you can see, most branches are going to be like these.

25
00:01:16,210 --> 00:01:18,640
We will be using very, very few entries

26
00:01:18,640 --> 00:01:23,040
by these branches, which leaves us plenty of counters

27
00:01:23,040 --> 00:01:25,550
for branches where we have a very long

28
00:01:25,550 --> 00:01:29,180
pattern. Where we will be using something like, you

29
00:01:29,180 --> 00:01:32,770
know, 16 histories and thus use something like

30
00:01:32,770 --> 00:01:35,737
16 counters. As you can see in this organization

31
00:01:35,737 --> 00:01:37,942
pretty much, the branch is that need more

32
00:01:37,942 --> 00:01:41,344
counters get them; branches that need relatively few counters

33
00:01:41,344 --> 00:01:44,109
get them. The only really additional cost

34
00:01:44,109 --> 00:01:46,320
relative to just having the counters is

35
00:01:46,320 --> 00:01:50,218
the histories. The downside is that again,

36
00:01:50,218 --> 00:01:54,481
some branches with particular histories might overlap in

37
00:01:54,481 --> 00:01:57,787
which counter they use, with other branches

38
00:01:57,787 --> 00:02:01,780
and other histories. Pretty much, my branch

39
00:02:01,780 --> 00:02:07,175
XOR with its history, might map to the same counter as some other branch, and

40
00:02:07,175 --> 00:02:12,380
its own history, when they're XOR. But this happens very rarely

41
00:02:12,380 --> 00:02:17,470
if the BHT is large, and now it can be large because each entry is just 2-bits.
