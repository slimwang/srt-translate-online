1
00:00:01,215 --> 00:00:03,931
The answer is no. It repeats values too

2
00:00:03,931 --> 00:00:07,689
infrequently. This may seem a little surprising.

3
00:00:07,689 --> 00:00:10,712
If it was random, well the probability of two

4
00:00:10,712 --> 00:00:14,814
consecutive values being equal should be to

5
00:00:14,814 --> 00:00:19,495
the negative 128, a very low probability, but

6
00:00:19,495 --> 00:00:24,002
not zero. If this is an encryption cipher, well

7
00:00:24,002 --> 00:00:27,495
it satisfies the property of invertibility. So

8
00:00:27,495 --> 00:00:30,662
any value thats different here encrypts to a

9
00:00:30,662 --> 00:00:32,826
different value. So that would mean that for

10
00:00:32,826 --> 00:00:35,600
our actual pseudo random number generator, this

11
00:00:35,600 --> 00:00:38,928
probability is actually equal to zero. And thats

12
00:00:38,928 --> 00:00:41,301
different from what it would be in a real random

13
00:00:41,301 --> 00:00:44,048
sequence. This probability is low enough that we

14
00:00:44,048 --> 00:00:46,514
still wouldnt expect a repetition for a long

15
00:00:46,514 --> 00:00:49,600
time, but we would expect to have one within

16
00:00:49,600 --> 00:00:51,965
the first two to the 70 outputs. And we

17
00:00:51,965 --> 00:00:54,167
will talk soon about the birthday paradox

18
00:00:54,167 --> 00:00:57,321
to see why we would expect one this soon.

19
00:00:57,321 --> 00:01:00,075
Still a pretty big number, but it would be enough

20
00:01:00,075 --> 00:01:03,307
to distinguish this from pure randomness. So to

21
00:01:03,307 --> 00:01:07,620
fix that, there is a couple of things we could do.

22
00:01:07,620 --> 00:01:10,618
One is to occasionally change the key and after

23
00:01:10,618 --> 00:01:13,534
some number of outputs we can take one output,

24
00:01:13,534 --> 00:01:16,797
instead of using it as an output we use it as the

25
00:01:16,797 --> 00:01:18,824
new key. So even if we dont have any more

26
00:01:18,824 --> 00:01:20,999
randomness, we will still change the key; that

27
00:01:20,999 --> 00:01:22,818
will affect this probability, it will no

28
00:01:22,818 --> 00:01:25,352
longer be zero, we will start seeing values

29
00:01:25,352 --> 00:01:27,437
that have some probability of repeating what

30
00:01:27,437 --> 00:01:29,131
we saw with the previous key. So well

31
00:01:29,131 --> 00:01:33,345
get a new key every few million outputs.

32
00:01:33,345 --> 00:01:36,009
The other concern is whether this pool of

33
00:01:36,009 --> 00:01:41,158
randomness is good enough? On Unix machines

34
00:01:41,158 --> 00:01:43,169
there is a pool of randomness stored in

35
00:01:43,169 --> 00:01:46,352
/dev/random and it is collecting events that

36
00:01:46,352 --> 00:01:48,880
are believed to be random and out of the

37
00:01:48,880 --> 00:01:51,035
control of the attacker. These could be user

38
00:01:51,035 --> 00:01:52,435
actions like key presses; these could be

39
00:01:52,435 --> 00:01:56,280
things that you collect over the network.

40
00:01:56,280 --> 00:01:59,050
There is some risk that these could be compromised,

41
00:01:59,050 --> 00:02:01,230
that some of them could be controlled or at

42
00:02:01,230 --> 00:02:03,398
least predictable to the attacker. So we want

43
00:02:03,398 --> 00:02:05,898
to have multiple pools of randomness and

44
00:02:05,898 --> 00:02:08,884
combine them in a way that makes it very

45
00:02:08,884 --> 00:02:12,433
difficult for an attacker to control this seed.

46
00:02:12,433 --> 00:02:14,038
And this is essentially what the Fortuna

47
00:02:14,038 --> 00:02:15,608
Pseudo Random Number Generator does

48
00:02:15,608 --> 00:02:17,591
and thats one of the more popular widely

49
00:02:17,591 --> 00:02:20,805
used ones. It does use this routine to avoid

50
00:02:20,805 --> 00:02:23,647
this apparently non-random property and it uses

51
00:02:23,647 --> 00:02:26,019
multiple pools of randomness selected in a way

52
00:02:26,019 --> 00:02:29,137
that makes it very hard for an attacker to control

53
00:02:29,137 --> 00:02:31,444
what the seed is, even if the attacker can

54
00:02:31,444 --> 00:02:35,444
control one or a few of the pools of randomness.
