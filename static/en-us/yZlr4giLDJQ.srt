1
00:00:00,480 --> 00:00:02,250
Now the work in span laws
tell you something about

2
00:00:02,250 --> 00:00:04,590
the minimum possible time.

3
00:00:04,590 --> 00:00:07,160
But I want you to ask yourself
a more interesting question.

4
00:00:07,160 --> 00:00:09,840
Is there an upper bound on
the time to execute the DAG?

5
00:00:11,260 --> 00:00:14,330
The answer is, yes,
according to a theorem by Richard Brent.

6
00:00:15,480 --> 00:00:16,759
Now, I love Brent's result.

7
00:00:16,759 --> 00:00:19,610
I think it's really cool and
really elegant.

8
00:00:19,610 --> 00:00:22,680
Personally, I think you can get a lot
of insight into parallel algorithms

9
00:00:22,680 --> 00:00:24,620
by re-deriving it.

10
00:00:24,620 --> 00:00:28,200
And you can do so without a lot of work.

11
00:00:28,200 --> 00:00:32,088
Now having said that, there are a bunch
of steps involved so I'm going to break

12
00:00:32,088 --> 00:00:36,020
this derivation into two parts, and
we'll have a small quiz in-between.

13
00:00:36,020 --> 00:00:39,570
So we have a DAG with a certain
amount of work and a particular span.

14
00:00:39,570 --> 00:00:40,490
Just as a reminder,

15
00:00:40,490 --> 00:00:44,960
our goal is to estimate an upper
bound on its execution time.

16
00:00:44,960 --> 00:00:48,250
Now suppose I give you
a PRAM with P processors and

17
00:00:48,250 --> 00:00:50,450
let's say you run the DAG.

18
00:00:50,450 --> 00:00:53,700
Now let's imagine we're doing some
forensic analysis and we go back and

19
00:00:53,700 --> 00:00:56,670
we look at the execution
of the DAG on the PRAM.

20
00:00:57,690 --> 00:01:00,470
Let's break up that
execution into phases,

21
00:01:00,470 --> 00:01:04,440
where each phase satisfies
three conditions.

22
00:01:04,440 --> 00:01:09,880
The first condition is that each phase
has exactly one critical path vertex.

23
00:01:09,880 --> 00:01:13,500
Note that this condition
immediately implies that there have

24
00:01:13,500 --> 00:01:14,759
to be D(n) phases.

25
00:01:15,920 --> 00:01:20,770
So let's say I've numbered the critical
path vertices from 1 to D(n).

26
00:01:20,770 --> 00:01:25,210
Then this condition implies
that there will be D(n) phases.

27
00:01:25,210 --> 00:01:28,310
So here's a cartoon of what
the phases might look like.

28
00:01:28,310 --> 00:01:31,390
Now since the critical path
vertices are numbered, and

29
00:01:31,390 --> 00:01:34,560
there's one critical
path vertex per phase,

30
00:01:34,560 --> 00:01:39,150
then I can number the phases by
the critical path for text number.

31
00:01:39,150 --> 00:01:42,060
So for
example here's critical path vertex 2 so

32
00:01:42,060 --> 00:01:44,165
I'll call this phase, phase 2.

33
00:01:45,320 --> 00:01:48,277
Okay, that's the first condition,
what about the second?

34
00:01:48,277 --> 00:01:52,835
The second condition is that all non
critical path vertices within a phase

35
00:01:52,835 --> 00:01:54,860
are independent.

36
00:01:54,860 --> 00:01:56,620
Let me show you what I mean.

37
00:01:56,620 --> 00:02:01,920
Let's take any phase with its single
critical path vertex, like this one.

38
00:02:01,920 --> 00:02:05,550
Now consider any non critical path
vertices that have been assigned to

39
00:02:05,550 --> 00:02:07,200
this phase.

40
00:02:07,200 --> 00:02:11,820
These vertices can only have edges that
enter the phase or exit the phase, but

41
00:02:11,820 --> 00:02:14,590
they can never depend on one another.

42
00:02:14,590 --> 00:02:18,560
So for example, this is okay, but

43
00:02:18,560 --> 00:02:20,720
a dependence like this
would not be allowed.

44
00:02:21,860 --> 00:02:24,550
Now this condition is always
possible to satisfy, and

45
00:02:24,550 --> 00:02:28,100
a good exercise is to see
if you can figure out why.

46
00:02:28,100 --> 00:02:29,930
As a hint, just think about paths,

47
00:02:29,930 --> 00:02:33,980
and the fact that the critical path
vertex lies on the longest path.

48
00:02:35,292 --> 00:02:38,960
Now, there's a third condition which
is that every vertex has to be in

49
00:02:38,960 --> 00:02:43,940
some phase, and further more it
should only be in one phase.

50
00:02:43,940 --> 00:02:49,680
So suppose this is our DAG, and
let's say we've divided it into phases.

51
00:02:49,680 --> 00:02:53,910
Now every phase K will have some
number of vertices associate with it.

52
00:02:55,200 --> 00:02:57,020
Let's say that number is WK.

53
00:02:59,050 --> 00:03:02,490
And this value WK will include
the critical path vertex.

54
00:03:03,900 --> 00:03:06,610
So by this third condition,
which says that

55
00:03:06,610 --> 00:03:10,670
every vertex has to appear in exactly
one phase, what does that imply?

56
00:03:11,870 --> 00:03:15,770
It basically tells us if I add up
the WKs across all the phases,

57
00:03:15,770 --> 00:03:19,090
then I should get the total
number of vertices.

58
00:03:19,090 --> 00:03:24,330
That is, the sum of WK for
K goes from 1 to D should be W.

59
00:03:25,610 --> 00:03:27,600
Okay, here's a question for you.

60
00:03:27,600 --> 00:03:30,300
How long will it take
to execute phase K?

61
00:03:31,490 --> 00:03:32,710
Let's call that time tK.

62
00:03:33,878 --> 00:03:37,200
Now if I have WK units
of independent work,

63
00:03:37,200 --> 00:03:42,185
which I get from condition two,
then that tells me that the total

64
00:03:42,185 --> 00:03:46,827
time to execute phase K should
be ceiling of WK divided by P.

65
00:03:46,827 --> 00:03:51,633
And that in turn implies that
if I sum over all phases then

66
00:03:51,633 --> 00:03:55,555
the total time is just
the sum of these tK's.

67
00:03:55,555 --> 00:03:58,615
So plugging in tK we get this summation.

68
00:03:58,615 --> 00:04:02,195
Okay, I know what you're thinking,
this seems really unhelpful.

69
00:04:02,195 --> 00:04:04,265
Are we any closer to achieving our goal?

70
00:04:05,605 --> 00:04:09,405
Mathematically these ceilings are really
ugly, and can we make them go away?
