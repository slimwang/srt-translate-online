1
00:00:00,210 --> 00:00:03,390
One pitfall that doesn't necessarily affect correctness, but

2
00:00:03,390 --> 00:00:08,050
may impact performance, is what we call spurious or unnecessary wake-ups.

3
00:00:08,050 --> 00:00:11,940
Let's look at this code for a writer and readers.

4
00:00:11,940 --> 00:00:16,830
Let's say currently there is a writer that's performing a write operation, so

5
00:00:16,830 --> 00:00:21,850
it is the one that has the lock counter mutex, so this is the shared lock.

6
00:00:21,850 --> 00:00:24,230
And then elsewhere in the program, readers for

7
00:00:24,230 --> 00:00:28,220
instance, are waiting on a condition variable, read_phase.

8
00:00:28,220 --> 00:00:31,180
So there are a number of readers that are associated with the wait

9
00:00:31,180 --> 00:00:33,590
queue that's part of that condition variable.

10
00:00:33,590 --> 00:00:39,070
So what can happen when this writer issues the broadcast operation,

11
00:00:39,070 --> 00:00:43,720
this broadcast can start removing threads from the wait queue

12
00:00:43,720 --> 00:00:47,190
that's associated with the read phase condition variable, and

13
00:00:47,190 --> 00:00:51,970
that can start happening, perhaps in another core, before the writer has

14
00:00:51,970 --> 00:00:56,720
completed the rest of the operations in the lock construct.

15
00:00:56,720 --> 00:01:00,270
Now, if that's the case, we have the writer on one core.

16
00:01:00,270 --> 00:01:05,349
It holds still the lock, and it's executing basically this portion of the code.

17
00:01:05,349 --> 00:01:07,960
And, at another core, on another CPU,

18
00:01:07,960 --> 00:01:11,950
the threads that are waking up from this queue that's associated with

19
00:01:11,950 --> 00:01:15,830
the condition variable that's part of the wait statement, they have to,

20
00:01:15,830 --> 00:01:19,080
the very first thing they do is, they have to reacquire the mutex.

21
00:01:19,080 --> 00:01:20,650
We explained this before.

22
00:01:20,650 --> 00:01:23,840
So that means the very first thing that these threads will do will

23
00:01:23,840 --> 00:01:26,090
try to reacquire the mutex.

24
00:01:26,090 --> 00:01:28,780
The mutex is still held by the writer thread.

25
00:01:28,780 --> 00:01:31,060
The writer thread still has the mutex.

26
00:01:31,060 --> 00:01:33,643
So none of these threads will be able to proceed.

27
00:01:33,643 --> 00:01:36,530
They'll be woken up from one queue that's associated with

28
00:01:36,530 --> 00:01:37,973
the condition variable, and

29
00:01:37,973 --> 00:01:42,130
they'll have to be placed on the queue that's associated with the mutex.

30
00:01:42,130 --> 00:01:46,210
So we will end up with this type of situation as a result of this.

31
00:01:46,210 --> 00:01:48,620
This is what we call spurious wake-up.

32
00:01:48,620 --> 00:01:51,440
We signaled we woke up the threads.

33
00:01:52,520 --> 00:01:55,270
And that wake-up was unnecessary.

34
00:01:55,270 --> 00:01:57,500
They have to now wait again.

35
00:01:57,500 --> 00:02:00,180
The program will still execute correctly.

36
00:02:00,180 --> 00:02:05,430
However, we will waste cycles by basically context switching these

37
00:02:05,430 --> 00:02:10,690
threads to run on the CPU and then back again to wait on the wait queue.

38
00:02:10,690 --> 00:02:15,958
The problem is that when we unlock only after we've issued the broadcast or

39
00:02:15,958 --> 00:02:20,738
the signal operation, no other thread will be able to get the lock.

40
00:02:20,738 --> 00:02:25,107
So spurious wake-ups is this situation when we're waking threads up,

41
00:02:25,107 --> 00:02:28,045
we're issuing the broadcast or the signal, and

42
00:02:28,045 --> 00:02:33,100
we know that it is possible that some of the threads may not be able to proceed.

43
00:02:33,100 --> 00:02:36,910
It will really depend on the ordering of the different operations.

44
00:02:36,910 --> 00:02:38,890
So, would this always work, though?

45
00:02:38,890 --> 00:02:44,620
Can we always unlock the mutex before we actually broadcast our signal?

46
00:02:44,620 --> 00:02:46,430
For instance by using this trick,

47
00:02:46,430 --> 00:02:50,690
we can transform the old writer code into this code where,

48
00:02:50,690 --> 00:02:55,370
we first unlock, and then we perform the broadcast and signal operations.

49
00:02:55,370 --> 00:02:57,450
This clearly will work just fine.

50
00:02:57,450 --> 00:03:01,990
The resulting code will avoid the problem of spurious wake-ups, and

51
00:03:01,990 --> 00:03:03,970
the program remains correct.

52
00:03:03,970 --> 00:03:07,540
In other cases, however, this would not be possible.

53
00:03:07,540 --> 00:03:11,260
We cannot restructure the program in this way.

54
00:03:11,260 --> 00:03:14,100
So if we look at what's happening at the readers,

55
00:03:14,100 --> 00:03:18,320
the signal operation is embedded in this if clause.

56
00:03:18,320 --> 00:03:23,412
And the if statement relies on the value of resource_counter.

57
00:03:23,412 --> 00:03:28,340
Now, resource_counter was the shared resource that this mutex was protecting in

58
00:03:28,340 --> 00:03:29,440
the first place.

59
00:03:29,440 --> 00:03:33,570
So we cannot unlock and then continue accessing the shared resource.

60
00:03:33,570 --> 00:03:36,230
That will affect the correctness of the program.

61
00:03:36,230 --> 00:03:41,760
Therefore, this technique of unlocking before we perform the broadcast or

62
00:03:41,760 --> 00:03:46,280
signal doesn't work in this particular case or in similar cases.
