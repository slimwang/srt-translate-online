1
00:00:00,260 --> 00:00:02,210
Now another pair of concepts.

2
00:00:02,210 --> 00:00:04,510
Abstraction and refinement.

3
00:00:04,510 --> 00:00:07,030
All design methods support these ideas.

4
00:00:07,030 --> 00:00:10,720
After all, we're dealing with large systems and

5
00:00:10,720 --> 00:00:14,190
the only way that we can wrap our mind around those large systems is to

6
00:00:14,190 --> 00:00:19,080
think about them in terms of abstract concepts, and then how we're going to

7
00:00:19,080 --> 00:00:23,180
refine each of those abstract concepts into lower level implementations.

8
00:00:23,180 --> 00:00:27,770
Programming languages, design techniques typically provide some

9
00:00:27,770 --> 00:00:30,780
conceptual mechanisms for dealing with abstraction.

10
00:00:30,780 --> 00:00:33,140
Here are a few, for example,

11
00:00:33,140 --> 00:00:36,590
the whole process of specification where we're dealing with the what,

12
00:00:37,740 --> 00:00:40,610
abstracts away all of the details of how we're going to solve the problem.

13
00:00:42,328 --> 00:00:46,760
Programming languages is typically have various aggregation abstraction such as

14
00:00:46,760 --> 00:00:53,100
arrays and structs and records and objects, that allow you to, if you wish,

15
00:00:53,100 --> 00:00:56,460
avoid the details of what all the features of those aggregations are.

16
00:00:58,140 --> 00:01:02,030
Obviously in object oriented languages, the whole idea of the class hierarchy

17
00:01:02,030 --> 00:01:06,030
and generalization allows you to abstract away from all the special cases.

18
00:01:07,820 --> 00:01:10,860
Even a fundamental thing like the,

19
00:01:10,860 --> 00:01:14,140
the parameters to procedure calls are function calls.

20
00:01:14,140 --> 00:01:20,090
Allow you to abstract away from what all the various possible calls

21
00:01:20,090 --> 00:01:26,160
to those functions are by specifying names for

22
00:01:26,160 --> 00:01:29,478
the parameters rather than all of the specific arguments.

23
00:01:29,478 --> 00:01:34,400
And finally, non-determinism, at least at the specification level,

24
00:01:34,400 --> 00:01:38,070
where you can avoid giving details of exactly how you're going to implement

25
00:01:38,070 --> 00:01:43,230
something by specifying that you in certain circumstances, you don't care.
