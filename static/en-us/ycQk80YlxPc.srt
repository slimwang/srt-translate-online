1
00:00:00,422 --> 00:00:03,780
I want to briefly explain why in
this matrix vector multiply example,

2
00:00:03,780 --> 00:00:08,060
it's not safe to make
the innermost loop a par four loop.

3
00:00:08,060 --> 00:00:13,450
First, observe that all iterations j
write to the same location y sub i.

4
00:00:13,450 --> 00:00:16,250
This situation is called a data race.

5
00:00:16,250 --> 00:00:20,630
So more precisely, a data race is at
least one read and at least one write

6
00:00:20,630 --> 00:00:24,364
that can happen at the same
memory location at the same time.

7
00:00:24,364 --> 00:00:28,500
So let's take two iterations
j just as an example.

8
00:00:28,500 --> 00:00:30,490
Let's assume that i is equal to 1.

9
00:00:30,490 --> 00:00:34,110
And let's look at j equals 5 and
j equals 100.

10
00:00:34,110 --> 00:00:39,190
And furthermore, suppose that y
sub 1 has the initial value of 0.

11
00:00:39,190 --> 00:00:43,010
Now, suppose I start executing
the two statements simultaneously.

12
00:00:43,010 --> 00:00:45,620
And let's say I evaluate
this multiplication and

13
00:00:45,620 --> 00:00:48,480
this multiplication at
the same time as well.

14
00:00:48,480 --> 00:00:53,410
Maybe hypothetically,
I get the values 72 and minus 100.

15
00:00:53,410 --> 00:00:57,180
Now, suppose I
simultaneously read y sub 1.

16
00:00:57,180 --> 00:01:01,690
Then both statements will get
the value 0 when they read y sub 1.

17
00:01:01,690 --> 00:01:06,449
Now, suppose that j equals
5 executes its right first,

18
00:01:06,449 --> 00:01:09,730
then y sub 1 will get the value of 72.

19
00:01:09,730 --> 00:01:11,009
But in the meantime,

20
00:01:11,009 --> 00:01:15,920
the j equals 100 statement is
operating with a stale value of y.

21
00:01:15,920 --> 00:01:19,010
So when we do this sum, we'll get
minus 100, and when we do the right,

22
00:01:19,010 --> 00:01:23,030
we'll overwrite the value of
72 instead of accumulating it.

23
00:01:23,030 --> 00:01:24,180
So it's clearly an error.

24
00:01:25,185 --> 00:01:29,600
Now, data race that leads to
an error is called a race condition.

25
00:01:29,600 --> 00:01:31,470
So when you're designing
parallel algorithms,

26
00:01:31,470 --> 00:01:34,800
you need to be careful to
avoid race conditions.

27
00:01:34,800 --> 00:01:39,090
As a heuristic, it's often helpful
to avoid data races as well.

28
00:01:39,090 --> 00:01:42,310
But an important point is that
a data race does not always lead

29
00:01:42,310 --> 00:01:44,010
to a race condition.

30
00:01:44,010 --> 00:01:46,220
You'll see some examples of
that throughout the course.
