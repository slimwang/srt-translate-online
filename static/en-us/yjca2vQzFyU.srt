1
00:00:00,270 --> 00:00:05,020
Given these two dags, which both compute
reductions, which one is better?

2
00:00:05,020 --> 00:00:09,080
Now, the linear dag has a sequential
chain of dependencies, so it can never

3
00:00:09,080 --> 00:00:12,900
really use more than one processor
at a time, other than the loads.

4
00:00:14,000 --> 00:00:17,840
The tree, by contrast can use
parallelism at every level.

5
00:00:19,510 --> 00:00:21,780
So the sequential dag will take On time,

6
00:00:21,780 --> 00:00:24,990
where the tree-based dag
will take log n time.

7
00:00:24,990 --> 00:00:28,420
Now, intuitively, if I give you two dags
and they both compute the same thing,

8
00:00:28,420 --> 00:00:31,090
than you generally prefer the one
that has more parallelism.

9
00:00:31,090 --> 00:00:34,620
But is that the only
thing you care about?

10
00:00:34,620 --> 00:00:36,740
Does anything else matter?

11
00:00:36,740 --> 00:00:40,470
I'm going to walk you through
a formalism called work span analysis.

12
00:00:40,470 --> 00:00:43,900
It will help you answer these and
a number of other interesting questions.

13
00:00:44,920 --> 00:00:48,650
Given a dag like this one, I will
always ask you two questions about it.

14
00:00:48,650 --> 00:00:53,630
The first questions is,
how many vertices does it have in total?

15
00:00:53,630 --> 00:00:54,600
And I'm going to give this a name.

16
00:00:54,600 --> 00:00:55,690
And I'm going to call it work.

17
00:00:56,770 --> 00:01:00,900
And I'll usually write it as W of n,
since the total

18
00:01:00,900 --> 00:01:03,590
number of operations should somehow
depend on the size of the input n.

19
00:01:03,590 --> 00:01:08,420
Now computing the work is easy,
you just count the number of vertices.

20
00:01:08,420 --> 00:01:11,160
The second thing I'll ask
you about a dag always,

21
00:01:11,160 --> 00:01:15,080
is how long is the longest
path through the dag?

22
00:01:15,080 --> 00:01:17,710
This also has a special name,
I'm going to call it the span.

23
00:01:17,710 --> 00:01:22,110
And I'm going to use the symbol
D of n to represent the span.

24
00:01:23,150 --> 00:01:27,720
Now in this dag, here is the longest
path, which I've circled, and

25
00:01:27,720 --> 00:01:29,230
this path also has a special name.

26
00:01:29,230 --> 00:01:30,520
It's called the critical path.

27
00:01:31,800 --> 00:01:35,570
Now as a historical aside,
the length of this critical path or

28
00:01:35,570 --> 00:01:39,380
what I just called the span,
historically was called depth.

29
00:01:39,380 --> 00:01:42,690
And that's why I'm using
the symbol D of n.

30
00:01:42,690 --> 00:01:44,440
Back in my day, we didn't have no span.

31
00:01:44,440 --> 00:01:45,910
We called it depth, and you liked it.

32
00:01:47,510 --> 00:01:51,180
So, in terms of work and span,
can we now say something about

33
00:01:51,180 --> 00:01:55,149
the time to execute the dag
on a PRAM with p processors?

34
00:01:56,150 --> 00:01:58,400
Here's some simple things we can say.

35
00:01:58,400 --> 00:02:02,770
First, if all the operations have unit
cost, then the time to execute this

36
00:02:02,770 --> 00:02:06,790
dag using only one processor
should be exactly the work W of n.

37
00:02:06,790 --> 00:02:10,530
Now let's consider the other scenario.

38
00:02:10,530 --> 00:02:13,380
Suppose I give you an infinite
number of processors.

39
00:02:13,380 --> 00:02:14,820
What's the time?

40
00:02:14,820 --> 00:02:17,170
Well if you have an infinite number of
processors it really doesn't matter,

41
00:02:17,170 --> 00:02:20,510
because you still have to
execute the critical path and

42
00:02:20,510 --> 00:02:22,340
that has length T of n.

43
00:02:22,340 --> 00:02:26,250
So the time given an infinite
number of processors is D of n.

44
00:02:26,250 --> 00:02:29,280
So, those are two handy facts, but
I think we want to try to say more.
