1
00:00:00,000 --> 00:00:04,000
Here’s my answer. The wordset is just like before.

2
00:00:04,000 --> 00:00:06,000
Read the file, uppercase it, and split it.

3
00:00:06,000 --> 00:00:09,000
In the prefixset, we go through each word in the wordset

4
00:00:09,000 --> 00:00:17,000
and then each prefix of the word, and collect that set p of prefixes and then return them.

5
00:00:17,000 --> 00:00:19,000
Now let’s see what these prefixes can do for us.

6
00:00:19,000 --> 00:00:22,000
I can define a new version of find_words(),

7
00:00:22,000 --> 00:00:25,000
and what this one is it looks exactly like the one before

8
00:00:25,000 --> 00:00:32,000
except what we do at each level of the loop is we add one statement that says,

9
00:00:32,000 --> 00:00:37,000
if the word that we built up so far is not one of the prefixes of a word in the dictionary,

10
00:00:37,000 --> 00:00:40,000
then there’s no sense doing any of these nested loops.

11
00:00:40,000 --> 00:00:44,000
We can continue onto the next iteration of the current loop,

12
00:00:44,000 --> 00:00:46,000
and that's what the continue statement says is

13
00:00:46,000 --> 00:00:51,000
don't do anything below, rather go back to the for loop

14
00:00:51,000 --> 00:00:54,000
that we’re nested in and go through the next iteration of that for loop.

15
00:00:54,000 --> 00:00:57,000
Normally, I don’t like the continue statement and normally, instead of saying

16
00:00:57,000 --> 00:01:04,000
if w not in prefixes continue, I would've said if w in prefixes then do this,

17
00:01:04,000 --> 00:01:09,000
but that would’ve introduced another level of indentation for each of these seven levels

18
00:01:09,000 --> 00:01:11,000
and I’d be running off the edge of the page,

19
00:01:11,000 --> 00:01:14,000
so here I grudgingly accepted the continue statement.

20
00:01:14,000 --> 00:01:17,000
The code looks just like before. I’ve just added seven lines.

21
00:01:17,000 --> 00:01:24,000
The exact same line indented into different levels goes all the way through a, b, c, d, e, f, and g.

22
00:01:24,000 --> 00:01:31,000
Now if I run the test_words function again, I get not half a second but 0.003 seconds.

23
00:01:31,000 --> 00:01:36,000
That’s nice and fast. That’s 150 times faster than before, 2000 hands per second.

24
00:01:36,000 --> 00:01:41,000
The function is long and ugly, but it’s fast enough. But still I’d like to clean it up.

25
00:01:41,000 --> 00:01:43,000
I don’t like repeating myself with code like this.

26
00:01:43,000 --> 00:01:47,000
I don’t like that this only works exactly for seven letters.

27
00:01:47,000 --> 00:01:51,000
I know that I may need more than that because there’s only seven letters

28
00:01:51,000 --> 00:01:55,000
in a hand, but sometimes you combine letters in a hand with letters on the board.

29
00:01:55,000 --> 99:59:59,999
This function won't be able to deal with it.
