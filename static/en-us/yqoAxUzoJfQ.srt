1
00:00:00,025 --> 00:00:03,580
K-means or something like k-means for
segmentation.

2
00:00:03,580 --> 00:00:04,770
It has some strengths.

3
00:00:04,770 --> 00:00:05,850
It's very simple to do.

4
00:00:05,850 --> 00:00:07,720
By the way, it's guaranteed to converge.

5
00:00:07,720 --> 00:00:08,700
You can sort of show that.

6
00:00:10,550 --> 00:00:14,290
But it has some distinct challenges.

7
00:00:14,290 --> 00:00:16,560
First of all,
it tends to be very memory-intensive,

8
00:00:16,560 --> 00:00:19,100
because you're keeping
all of your points and

9
00:00:19,100 --> 00:00:23,040
you're shuffling them around in,
in in a, in a membership way.

10
00:00:23,040 --> 00:00:25,750
Perhaps one of the biggest ones,
well actually there's two big ones.

11
00:00:25,750 --> 00:00:29,740
One is here is, you need to tell it K,
you need to tell it how many

12
00:00:29,740 --> 00:00:34,180
points there are how many
clusters there are, a priori.

13
00:00:34,180 --> 00:00:35,070
You can try to discover,

14
00:00:35,070 --> 00:00:37,655
that but K-Means doesn't know
anything about how to do that.

15
00:00:37,655 --> 00:00:41,270
It, it's sensitive to initialization and
outliers.

16
00:00:41,270 --> 00:00:45,930
And in particular,
what it's looking for are nice,

17
00:00:45,930 --> 00:00:50,510
essentially spherical clusters, where
they're spherical in feature space.

18
00:00:50,510 --> 00:00:52,900
That is, it doesn't want any
point to be too far away.

19
00:00:52,900 --> 00:00:56,120
And the problem with that
can be illustrated in,

20
00:00:56,120 --> 00:00:58,480
in a figure that looks like this.

21
00:00:58,480 --> 00:01:04,083
So here is a figure with two clusters
in it this one here and this one there.

22
00:01:04,083 --> 00:01:07,323
Now i've drawn them, or that I should
say they've been drawn in red and

23
00:01:07,323 --> 00:01:09,708
blue to help you think that
they should be separate.

24
00:01:09,708 --> 00:01:13,962
But if you, if you were to look at
that pattern, in just black and white,

25
00:01:13,962 --> 00:01:15,336
you probably would say,

26
00:01:15,336 --> 00:01:20,540
well there's this bent cluster here, and
then there's this bent cluster there.

27
00:01:20,540 --> 00:01:23,160
But of course,
if you were to run K-Means,

28
00:01:23,160 --> 00:01:24,630
you would get what's shown here.

29
00:01:24,630 --> 00:01:28,415
This would be one cluster, and
that would be another cluster because

30
00:01:28,415 --> 00:01:32,500
K-Means is looking for
these spherical clusters.
