1
00:00:00,500 --> 00:00:03,960
Recall that our original goal was
not just to evaluate a polynomial at

2
00:00:03,960 --> 00:00:08,109
the roots of unity but rather to
multiply two polynomials together or

3
00:00:08,109 --> 00:00:11,790
even more generally to convolve
two sequences of numbers together.

4
00:00:11,790 --> 00:00:16,149
The faster way to transform would seem
only to get us a little past halfway.

5
00:00:16,149 --> 00:00:17,380
So let's go back and

6
00:00:17,380 --> 00:00:22,230
look at our road map to see where we are
in multiplying two polynomials together.

7
00:00:22,230 --> 00:00:23,520
Let's take a step back and

8
00:00:23,520 --> 00:00:27,840
see where we are in trying to find
a faster way to multiply polynomials.

9
00:00:27,840 --> 00:00:32,100
We have an N logN way to
evaluate the polynomials,

10
00:00:32,100 --> 00:00:36,300
we can then multiply them in the value
representation easily in N time,

11
00:00:37,370 --> 00:00:40,610
but the interpolation
step remains a problem.

12
00:00:40,610 --> 00:00:43,760
Remember that this runtime
involved inverting or

13
00:00:43,760 --> 00:00:47,120
applying Gaussian elimination
to a Vandermonde matrix.

14
00:00:47,120 --> 00:00:51,270
Or to get the square here, we could
have used Lagrange interpolation.
