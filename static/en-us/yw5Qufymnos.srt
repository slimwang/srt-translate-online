1
00:00:00,200 --> 00:00:03,250
One way to think about a delegate
is to imagine that each

2
00:00:03,250 --> 00:00:06,270
key difference one sees across
views of the same class,

3
00:00:06,270 --> 00:00:09,420
corresponds to a question that
the view could ask of its delegate.

4
00:00:10,430 --> 00:00:14,170
For example, what should I do
with these new characters?

5
00:00:14,170 --> 00:00:17,110
How should I respond when
the return button is clicked?

6
00:00:17,110 --> 00:00:19,700
What should happen when editing begins?

7
00:00:19,700 --> 00:00:20,700
in other words,

8
00:00:20,700 --> 00:00:24,350
the view needs some other class to
decide what to do with user input.

9
00:00:25,470 --> 00:00:28,646
So, what kind of object can
answer these questions?

10
00:00:28,646 --> 00:00:33,963
The view's delegate is usually, but not
strictly, going to be a control object.

11
00:00:33,963 --> 00:00:37,675
It makes sense for control objects
to answer the view's questions,

12
00:00:37,675 --> 00:00:41,323
because control objects are designed
to perform tasks like passing

13
00:00:41,323 --> 00:00:43,680
user input to a data model.

14
00:00:43,680 --> 00:00:47,710
The key to the delegate pattern, is that
the view establishes the questions that

15
00:00:47,710 --> 00:00:51,530
it needs answered and
encodes them in a protocol.

16
00:00:51,530 --> 00:00:55,240
A protocol is a list of methods
that a delegate must implement.

17
00:00:56,290 --> 00:00:59,670
Any object that fulfills
the protocol can become a delegate.
