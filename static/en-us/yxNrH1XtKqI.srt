1
00:00:00,000 --> 00:00:03,690
Since we'll be working on problems with graphs in this course,

2
00:00:03,690 --> 00:00:07,840
we need to find a way to efficiently represent them in a program.

3
00:00:07,840 --> 00:00:12,580
There are a lot of different ways doing this and they're really based on certain tradeoffs

4
00:00:12,580 --> 00:00:17,040
such as memory requirements, speed of certain operations, modifying the graph,

5
00:00:17,040 --> 00:00:20,110
determining the neighbors of a vertex, etc.

6
00:00:20,110 --> 00:00:23,530
And what you want to do and how you want to represent them

7
00:00:23,530 --> 00:00:26,290
really depends on the specific problem you're talking about.

8
00:00:26,290 --> 00:00:30,720
But let's take a look at a fairly simple way of representing a graph

9
00:00:30,720 --> 00:00:33,720
and that's called an adjacency matrix.

10
00:00:33,720 --> 00:00:40,390
An adjacency matrix specifies which vertices are connected to which other vertices.

11
00:00:40,390 --> 00:00:46,420
So let's go ahead and explain by building this adjacency matrix for this graph.

12
00:00:46,420 --> 00:00:56,300
So let's look at A. Well, A isn't connected to A and we're going to represent that by writing down 0.

13
00:00:56,300 --> 00:01:02,780
A, however, is connected to B and we're going to specify that by putting a 1 in this location.

14
00:01:02,780 --> 00:01:08,950
Similarly, A is connected to C and A is not connected to D, at least not directly.

15
00:01:08,950 --> 00:01:12,100
And that's really what an adjacency matrix cares about.

16
00:01:12,100 --> 00:01:14,970
All right. So an adjacency matrix is really pretty simple.

17
00:01:14,970 --> 00:01:21,780
You just put a 0 everywhere where one of the vertices, the row vertex,

18
00:01:21,780 --> 00:01:27,400
is not connected to the column vertex and vice versa since there's no direction here.

19
00:01:27,400 --> 00:01:33,400
And you put a 1 everywhere where the row vertex is connected to the column vertex.

20
00:01:33,400 --> 00:01:40,280
And so you see that the matrix is symmetric. That is, it's mirrored right about the diagonal here.

21
00:01:40,280 --> 00:01:44,080
So A is connected to B, which means that well B is also connected to A.

22
00:01:44,080 --> 00:01:48,090
It's not necessarily the case if you have a direction on each of these arrows

23
00:01:48,090 --> 00:01:50,520
but we're not going to worry about that right now.

24
00:01:50,520 --> 00:01:55,480
Now what I'd like you to do is give me the best possibly O notation running time

25
00:01:55,480 --> 00:01:57,560
for each operation below.

26
00:01:57,560 --> 00:02:02,500
We're going to assume a graph with n vertices represented as an adjacency matrix.

27
00:02:02,500 --> 00:02:08,400
We're also going to assume that the time it takes to access any particular element

28
00:02:08,400 --> 00:02:14,220
is constant and that the memory needed to represent the list of elements is order n.

29
00:02:14,220 --> 00:02:22,360
So give me the big O notation of the time it takes to represent all of these.
