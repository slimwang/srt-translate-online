1
00:00:01,050 --> 00:00:04,140
Here's what the testLocationTable
method looks like.

2
00:00:04,140 --> 00:00:07,000
First, we grab a reference
to a writable database

3
00:00:07,000 --> 00:00:09,480
because we'll be modifying the database.

4
00:00:09,480 --> 00:00:11,630
Then we create content values for

5
00:00:11,630 --> 00:00:16,149
a row of location data using
the function within test utilities.

6
00:00:16,149 --> 00:00:20,340
Then we insert that content values
object into the location table.

7
00:00:20,340 --> 00:00:23,590
The return value of the insert
statement should be row ID.

8
00:00:23,590 --> 00:00:28,040
If it's negative one, we know
the insertion failed, so we assert that.

9
00:00:28,040 --> 00:00:31,970
Then we query the location table and
pass in null for all the parameters

10
00:00:31,970 --> 00:00:35,640
to get a default query of all tabled
rows and columns, since we want

11
00:00:35,640 --> 00:00:39,950
a precisely verify that our database
only contains our inserted record.

12
00:00:39,950 --> 00:00:42,260
The query will return a cursor.

13
00:00:42,260 --> 00:00:45,470
And we are assert if we cannot
move it to the first row.

14
00:00:45,470 --> 00:00:49,940
Finally, we call validate current record
from the test utility to validate

15
00:00:49,940 --> 00:00:52,450
the query will return
the correct record.

16
00:00:52,450 --> 00:00:55,600
Validate current record
grabs the set of value pairs

17
00:00:55,600 --> 00:00:57,460
from the content values
that we inserted.

18
00:00:57,460 --> 00:01:01,390
It then iterates through them,
using cursor.getColumnIndex

19
00:01:01,390 --> 00:01:04,030
to get the index of each column
in the record set by name.

20
00:01:05,120 --> 00:01:08,350
We need the column index to
get data from the cursor.

21
00:01:08,350 --> 00:01:11,065
Note the projections
are always return in order.

22
00:01:11,065 --> 00:01:14,695
So if we specify a projection,
we can safely use the indexes from our

23
00:01:14,695 --> 00:01:17,695
projection array without having
to look them up like this.

24
00:01:17,695 --> 00:01:19,595
Let's go back to our test.

25
00:01:19,595 --> 00:01:23,665
We checked to make sure the database has
only one record by making sure we moved

26
00:01:23,665 --> 00:01:28,715
to next fails, then we close the cursor
and database, we don't leak resources.

27
00:01:28,715 --> 00:01:31,360
Finally, we return the locationRowId.

28
00:01:31,360 --> 00:01:34,040
Let's run the test and see what happens.

29
00:01:34,040 --> 00:01:38,220
And the test past, [SOUND],
only one more test to write.
