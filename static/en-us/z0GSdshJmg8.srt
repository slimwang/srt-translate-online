1
00:00:00,210 --> 00:00:02,450
In this lesson we will look at Pyretic

2
00:00:02,450 --> 00:00:06,450
which is an SDN language, and run time that

3
00:00:06,450 --> 00:00:09,860
implements some of the composition operators that we

4
00:00:09,860 --> 00:00:12,250
discussed in the last lesson. The language is a

5
00:00:12,250 --> 00:00:14,820
way of expressing these high level policies, and

6
00:00:14,820 --> 00:00:18,520
the run time provides the function of compiling these

7
00:00:18,520 --> 00:00:21,970
policies. So, the OpenFlow rules that are eventually are

8
00:00:21,970 --> 00:00:25,380
installed on the switches. One key abstraction in Pyretic

9
00:00:25,380 --> 00:00:31,360
is the notion of located packets. The idea that we can apply a policy based on

10
00:00:31,360 --> 00:00:34,590
a packet and it's location, in a network.

11
00:00:34,590 --> 00:00:37,020
Such as the switch, at which that packet is

12
00:00:37,020 --> 00:00:39,540
located or the port on which that packet

13
00:00:39,540 --> 00:00:44,290
arrives. Pyretic offers several features. The first is, the

14
00:00:44,290 --> 00:00:47,630
ability to take as input a packet, and

15
00:00:47,630 --> 00:00:51,220
then return packets at different locations in the network.

16
00:00:51,220 --> 00:00:54,270
This effectively allows the implementation of network

17
00:00:54,270 --> 00:00:58,320
policy as a function, that simply takes packets

18
00:00:58,320 --> 00:01:01,120
and returns other packets at different locations.

19
00:01:01,120 --> 00:01:03,130
The second feature of Pyredic is the notion

20
00:01:03,130 --> 00:01:06,190
of Boolean predicates. Unlike open flow rules,

21
00:01:06,190 --> 00:01:09,590
which do not permit the expression of simple

22
00:01:09,590 --> 00:01:12,800
conjunctions such as and, and or, or negations

23
00:01:12,800 --> 00:01:16,310
like not. Pyredic allows the expressions of policies

24
00:01:16,310 --> 00:01:19,420
in terms of these predicates. Pyredic also provides

25
00:01:19,420 --> 00:01:22,080
the notion of virtual package header fields. Which

26
00:01:22,080 --> 00:01:26,810
allows the programmer to refer to packet locations

27
00:01:26,810 --> 00:01:29,120
and also to tag packets so that specific

28
00:01:29,120 --> 00:01:32,050
functions can be applied at different portions of

29
00:01:32,050 --> 00:01:35,900
the program. Pyretic also provides composition operators, such

30
00:01:35,900 --> 00:01:39,150
as parallel and sequential composition, which we discussed

31
00:01:39,150 --> 00:01:41,440
in the last lesson. The notion of network

32
00:01:41,440 --> 00:01:45,002
policy as a function contrasts with the

33
00:01:45,002 --> 00:01:47,850
Open Flow style of programming. In OpenFlow,

34
00:01:47,850 --> 00:01:50,750
policies are simply bit patterns. In other

35
00:01:50,750 --> 00:01:54,550
words, match statements for which matching packets are

36
00:01:54,550 --> 00:01:56,990
subject to a particular action. These types

37
00:01:56,990 --> 00:01:59,190
of policies can be particularly difficult to

38
00:01:59,190 --> 00:02:02,890
reason about. In contrast, in Pyretic, policies

39
00:02:02,890 --> 00:02:06,690
are functions that map packets to other packets.

40
00:02:06,690 --> 00:02:08,910
Some example functions in Pyretic include the

41
00:02:08,910 --> 00:02:12,450
identify function, which returns the original packet,

42
00:02:12,450 --> 00:02:15,090
none or drop, which returns the empty

43
00:02:15,090 --> 00:02:18,850
set, match which returns the identity if the

44
00:02:18,850 --> 00:02:26,430
field f matches the value v and returns none or drop otherwise. Mod, which

45
00:02:26,430 --> 00:02:32,020
returns the same packet with the field f set to v. Forward, which is simply

46
00:02:32,020 --> 00:02:36,100
syntactic sugar on mod. To say that, the

47
00:02:36,100 --> 00:02:38,050
output port field in the packet should be

48
00:02:38,050 --> 00:02:42,470
modified to the parameter specified and flood which

49
00:02:42,470 --> 00:02:44,860
returns one packet for each port on the

50
00:02:44,860 --> 00:02:47,620
network spanning tree. In open flow, packets either

51
00:02:47,620 --> 00:02:49,840
match on a rule, or they simply fall

52
00:02:49,840 --> 00:02:53,600
through to the next rule. So, or, not,

53
00:02:53,600 --> 00:02:57,180
Ect can be tough to reason about. In contrast,

54
00:02:57,180 --> 00:03:00,090
peretics match function outputs either the

55
00:03:00,090 --> 00:03:03,620
packet or nothing, depending on whether the

56
00:03:03,620 --> 00:03:06,710
predicate is satisfied. For example, we could

57
00:03:06,710 --> 00:03:08,890
apply a match statement that says match

58
00:03:08,890 --> 00:03:12,190
destination IP equals ten zero zero three.

59
00:03:12,190 --> 00:03:14,680
And this function would take packets as

60
00:03:14,680 --> 00:03:19,340
input and only return packets that satisfy

61
00:03:19,340 --> 00:03:22,380
this particular predicate. In addition to the

62
00:03:22,380 --> 00:03:26,430
standard packet header fields, Pyretic offers the notion

63
00:03:26,430 --> 00:03:28,880
of virtual packet header fields, which is a

64
00:03:28,880 --> 00:03:32,290
unified way of representing packet metadata. In Pyretic,

65
00:03:32,290 --> 00:03:35,010
the packet is nothing more than a dictionary that

66
00:03:35,010 --> 00:03:37,480
maps a field name such as the destination

67
00:03:37,480 --> 00:03:40,570
IP address to a value. Now, these field names

68
00:03:40,570 --> 00:03:43,570
could correspond to fields in an actual packet

69
00:03:43,570 --> 00:03:48,120
header. But they can also be virtual. For example,

70
00:03:48,120 --> 00:03:50,270
we could provide a match statement based

71
00:03:50,270 --> 00:03:53,070
on a switch, indicating that we only want

72
00:03:53,070 --> 00:03:58,870
to return packets that are located at a particular switch or on the input port,

73
00:03:58,870 --> 00:04:01,090
indicating that we only want c packets

74
00:04:01,090 --> 00:04:04,080
whose attributes match a particular input port. The

75
00:04:04,080 --> 00:04:07,650
match function matches on this packet meta-data

76
00:04:07,650 --> 00:04:10,525
and the mod function can modify this meta-data.
