1
00:00:00,230 --> 00:00:03,065
So having seen the need for total order and

2
00:00:03,065 --> 00:00:06,990
an ambiguous decision making in the distributed system let's now

3
00:00:06,990 --> 00:00:10,690
introduce Lamport's Total Order formulation. This is the notation we're

4
00:00:10,690 --> 00:00:14,260
going to use for Lamport's Total Order. And so what we

5
00:00:14,260 --> 00:00:16,350
are saying here is that if there are two

6
00:00:16,350 --> 00:00:19,770
events A and B in the distributed system, A happens

7
00:00:19,770 --> 00:00:22,850
to be an event in this case on PI And

8
00:00:22,850 --> 00:00:26,740
B happens to be an event, on process PJ. If

9
00:00:26,740 --> 00:00:31,850
we want to assert that, a totally is ordered

10
00:00:31,850 --> 00:00:36,930
ahead of b, that is a precedes b in the total order. This

11
00:00:36,930 --> 00:00:42,010
is true only under the condition that either, the time stamp

12
00:00:42,010 --> 00:00:46,850
associated with A is less than B or the time stamp

13
00:00:46,850 --> 00:00:51,860
happens to be the same and there is some arbitrary other

14
00:00:51,860 --> 00:00:56,750
function that helps us to un ambiguously decide

15
00:00:56,750 --> 00:01:02,040
which event precedes the other and for instance I might say that

16
00:01:02,040 --> 00:01:07,000
the process ID that I associated with PI and PJ, that maybe

17
00:01:07,000 --> 00:01:11,820
the one that I use to break the tie. In my family car example, I told

18
00:01:11,820 --> 00:01:14,570
you that the seniority of the family member

19
00:01:14,570 --> 00:01:16,860
makes the decision in terms of how we break

20
00:01:16,860 --> 00:01:19,310
the tie. So for instance in this, in this

21
00:01:19,310 --> 00:01:22,270
case if process Pi has a process ID 100

22
00:01:22,270 --> 00:01:27,280
and process Pj has a process ID 200 then

23
00:01:27,280 --> 00:01:31,040
we could say that the arbitrary decision making in the

24
00:01:31,040 --> 00:01:33,840
case of a tie is that whichever process has

25
00:01:33,840 --> 00:01:36,690
a lower process ID, that's going to be the winner. So

26
00:01:36,690 --> 00:01:39,280
we might, we might decide that in this case,

27
00:01:39,280 --> 00:01:42,200
if time stamp happens to be the same, then since

28
00:01:42,200 --> 00:01:45,240
Pi is less than Pj, I'm going to say that

29
00:01:45,240 --> 00:01:49,280
a preceeds b. So it's an arbitrary, well-known condition

30
00:01:49,280 --> 00:01:51,570
for breaking a tie. So every process in the

31
00:01:51,570 --> 00:01:55,630
entire distributive system is going to use the same well-known, arbitrary

32
00:01:55,630 --> 00:01:58,280
condition in order to break to tie. So that

33
00:01:58,280 --> 00:02:01,100
also brings up another interesting point, and that is there

34
00:02:01,100 --> 00:02:04,300
is no single total order. The single total order

35
00:02:04,300 --> 00:02:08,400
comes from the choice of the arbitraty well known condition.

36
00:02:08,400 --> 00:02:11,150
I gave you the example of my family car,

37
00:02:11,150 --> 00:02:14,010
we broke the tie in the family car situation

38
00:02:14,010 --> 00:02:18,640
by saying that the seniority is the winner. Tomorrow

39
00:02:18,640 --> 00:02:21,060
as a family we could make the decision that the

40
00:02:21,060 --> 00:02:23,660
youngest person is going to win. In that case, my

41
00:02:23,660 --> 00:02:26,270
daughter will have dibs over the car over everybody

42
00:02:26,270 --> 00:02:28,100
else in the case of a tie. The other

43
00:02:28,100 --> 00:02:33,950
important point to understand is that all of this idea

44
00:02:33,950 --> 00:02:37,640
of associating logical time stamps with events, and

45
00:02:37,640 --> 00:02:41,530
then deriving a total order from the logical time

46
00:02:41,530 --> 00:02:44,690
stamp using this kind of a, a method

47
00:02:44,690 --> 00:02:47,140
of saying we going to just believe the time stamp

48
00:02:47,140 --> 00:02:50,840
associated with the respective events. We going to believe

49
00:02:50,840 --> 00:02:53,710
that time standard are associated with the events and

50
00:02:53,710 --> 00:02:55,680
use those time stand as a way of

51
00:02:55,680 --> 00:02:59,790
ordering them, so that we can develop total order.

52
00:02:59,790 --> 00:03:02,360
And if it happens to be a tie, everybody

53
00:03:02,360 --> 00:03:06,170
uses a well known arbitrary condition to break the tie

54
00:03:06,170 --> 00:03:08,200
and that's how we derive a total order, and

55
00:03:08,200 --> 00:03:10,540
once we have derived the total order, the time stamps

56
00:03:10,540 --> 00:03:13,110
are meaningless after that. We don't care about them

57
00:03:13,110 --> 00:03:17,500
anymore. The whole idea of having these logical time stamps.

58
00:03:17,500 --> 00:03:21,090
Creating a partial order. And from the partial order

59
00:03:21,090 --> 00:03:25,760
deriving a total order using this formulation. For total ordering.

60
00:03:25,760 --> 00:03:29,080
Is so that we can get a particular total order.

61
00:03:29,080 --> 00:03:32,080
And once we get the total order, timestamps are meaningless.
