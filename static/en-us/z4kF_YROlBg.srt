1
00:00:00,200 --> 00:00:02,670
This program is vulnerable.

2
00:00:02,670 --> 00:00:06,550
This really simplified program what
it's doing is something similar to what

3
00:00:06,550 --> 00:00:09,230
a password checking program might do.

4
00:00:09,230 --> 00:00:11,450
Think about what the program is doing,

5
00:00:11,450 --> 00:00:13,740
this is our main
function as the program.

6
00:00:13,740 --> 00:00:15,960
It has take some arguments.

7
00:00:15,960 --> 00:00:18,000
It has bunch of local variables.

8
00:00:18,000 --> 00:00:21,820
It has an integer that's value at
the end is going to be should login be

9
00:00:21,820 --> 00:00:23,540
allowed or not allowed.

10
00:00:23,540 --> 00:00:26,000
It has a local variable
of size no more than 12.

11
00:00:26,000 --> 00:00:29,622
Well that's where we're going to read
the password that we're going to ask

12
00:00:29,622 --> 00:00:31,010
the user to type.

13
00:00:31,010 --> 00:00:34,210
And then we have to compare that with

14
00:00:34,210 --> 00:00:37,070
something that we know about
the password of the user.

15
00:00:37,070 --> 00:00:41,770
So the target password here really
is the password we are looking for.

16
00:00:41,770 --> 00:00:46,880
Here is a really poor practice here,
but the target password is hard coded.

17
00:00:46,880 --> 00:00:50,470
Other thing I should mention here
is that password checking programs

18
00:00:50,470 --> 00:00:54,220
actually don't need to keep your
password because then if somebody

19
00:00:54,220 --> 00:00:57,390
gains control of that then
they know your password also.

20
00:00:57,390 --> 00:01:01,820
So these are sort of the local variables
that we declare in this function.

21
00:01:01,820 --> 00:01:03,370
This is where we get to this code.

22
00:01:03,370 --> 00:01:04,900
The code is very simple.

23
00:01:04,900 --> 00:01:06,780
It's saying I'm going to get a string.

24
00:01:06,780 --> 00:01:10,870
Gets is read a string function get
a string that you're going to type.

25
00:01:10,870 --> 00:01:15,210
We're going to read that string into
this local variable pwdstr that we

26
00:01:15,210 --> 00:01:20,060
declared, then we're going to do
a comparison of the string that we just

27
00:01:20,060 --> 00:01:26,950
read into pwdstr against our target
password, which is my password 123.

28
00:01:26,950 --> 00:01:31,620
This string compare actually is,
this variant says at most

29
00:01:31,620 --> 00:01:36,620
12 character long strings and the result
of this comparison, if the two strings

30
00:01:36,620 --> 00:01:42,610
are identical then it returns a 0,
otherwise it returns a non zero value.

31
00:01:42,610 --> 00:01:45,420
So read more about this function
to find out exactly what

32
00:01:45,420 --> 00:01:49,460
it returns in the other cases,
less than zero or greater than zero.

33
00:01:49,460 --> 00:01:51,834
So in this case, allow_login = 1,

34
00:01:51,834 --> 00:01:56,330
after that we going to say if
allow_login = 0, remember that was

35
00:01:56,330 --> 00:02:01,070
the initial value, we had shown that
we don't allow unless there is a match.

36
00:02:01,070 --> 00:02:03,440
Remember the fail safe
defaults we talked about?

37
00:02:03,440 --> 00:02:05,860
So the default here is don't allow.

38
00:02:05,860 --> 00:02:07,680
So that's why we're setting it to zero.

39
00:02:07,680 --> 00:02:12,910
So if the variable is not set to 1 as
a result of a successful comparison

40
00:02:12,910 --> 00:02:17,660
then it's still 0 then in that case we
are going to reject the log in request.

41
00:02:17,660 --> 00:02:20,040
Otherwise the match was successful.

42
00:02:20,040 --> 00:02:24,230
We set it to 1, so in that case,
we're going to allow the log in request.

43
00:02:24,230 --> 00:02:30,350
But the goal here is to understand how
vulnerable our code gets exploited.

44
00:02:30,350 --> 00:02:32,850
So we want to see how
this code gets exploited.

45
00:02:32,850 --> 00:02:36,270
And this simple program that
we have here helps us do that.
