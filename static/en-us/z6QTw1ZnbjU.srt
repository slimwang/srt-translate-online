1
00:00:00,390 --> 00:00:02,870
All right, so here we are,
back in Android Studio again.

2
00:00:02,870 --> 00:00:06,150
Let's go ahead and look at the layout
design for Chatum Latinum.

3
00:00:06,150 --> 00:00:09,300
So, there's actually three files that we
looked at that make up the design, but

4
00:00:09,300 --> 00:00:12,100
the most important one that we want to
see if we can essentially flatten

5
00:00:12,100 --> 00:00:16,690
is the layout XML for our individual
chat items, or distinct rows.

6
00:00:16,690 --> 00:00:17,630
All right, so just to be clear,

7
00:00:17,630 --> 00:00:20,010
whenever I'm going to bring up
the Chatum Latinum activity again.

8
00:00:21,010 --> 00:00:24,090
And the layout that we're
concerned with the most here

9
00:00:24,090 --> 00:00:26,970
is the individual chat items
that we see horizontally here.

10
00:00:26,970 --> 00:00:28,620
So let's go back and take a look.

11
00:00:28,620 --> 00:00:31,840
So here's the markup for
our individual chat items.

12
00:00:31,840 --> 00:00:35,760
As you can see here, we have a similar
design to almost the unoptimized version

13
00:00:35,760 --> 00:00:39,020
of the compare layouts activity
that we looked at just previously.

14
00:00:40,020 --> 00:00:44,850
Now, this is a natural way to create
a list item, again it's nested in

15
00:00:44,850 --> 00:00:48,660
structure or following something that's
similar to the dom like the web.

16
00:00:48,660 --> 00:00:52,630
But this nested nature of linear
layouts is not necessarily needed.

17
00:00:52,630 --> 00:00:55,430
And we can go ahead and
flatten a bit more.

18
00:00:55,430 --> 00:00:58,070
So let's take a look at how we can do
that, I'm going to bring up a branch

19
00:00:58,070 --> 00:01:01,120
that has an optimized version so
we can talk about it.

20
00:01:01,120 --> 00:01:04,569
All right, so I've brought the phone
back on this screen to kind of compare

21
00:01:04,569 --> 00:01:08,700
how we're able to achieve the same
design, that originally started as

22
00:01:08,700 --> 00:01:12,470
nested, into a flattened version
using a relative layout.

23
00:01:12,470 --> 00:01:16,630
Now as before, we have this image view
in our layout that represents the chat

24
00:01:16,630 --> 00:01:21,040
avatar, but when we implement using
a relative layout, this can be sort of

25
00:01:21,040 --> 00:01:25,590
like an anchor, that we specify
some other items relative to him.

26
00:01:25,590 --> 00:01:28,960
For example, we have a bunch of text
on this screen, we've got the chat

27
00:01:28,960 --> 00:01:34,190
author name, we've got a date and time,
and then we have the actual chat text.

28
00:01:34,190 --> 00:01:38,510
And this is all declared in the IDs for
the individual text views.

29
00:01:38,510 --> 00:01:42,620
Now, let's see how we can orient
them in a relative nature.

30
00:01:42,620 --> 00:01:47,350
So, for example, we took the chat
author name, and we used this attribute

31
00:01:47,350 --> 00:01:51,830
called layout to the right, to describe
it to be on the right of the avatar.

32
00:01:52,930 --> 00:01:54,580
In similar we also did the same for

33
00:01:54,580 --> 00:01:59,800
the chat text, which is also specified
to the right of the chat avatar.

34
00:01:59,800 --> 00:02:02,680
But then we need to determine
that the core of the message,

35
00:02:02,680 --> 00:02:05,500
actually lies below
this chat author name.

36
00:02:05,500 --> 00:02:09,008
So we use this layout attribute to
say below the chat date and time.

37
00:02:09,008 --> 00:02:13,400
And then lastly,
we have a chat date and time here, and

38
00:02:13,400 --> 00:02:16,640
we do a small little adjustment to
make sure that stays to the right,

39
00:02:16,640 --> 00:02:19,390
using the align pair right attribute.

40
00:02:19,390 --> 00:02:21,890
So look at that,
with this relative description and

41
00:02:21,890 --> 00:02:26,630
this relative design we've flattened our
layout, achieved the same thing visually

42
00:02:26,630 --> 00:02:28,780
and gained a bit more performance,
as you saw in hierarchy viewer.

43
00:02:28,780 --> 00:02:32,380
All right, so the main idea is
that when you're revisiting and

44
00:02:32,380 --> 00:02:35,500
refactoring your layouts, see if you can
look for opportunities where you might

45
00:02:35,500 --> 00:02:38,410
have inefficiencies like nesting,
and replace them

46
00:02:38,410 --> 00:02:41,530
with implementations that are a bit more
flat, like this relative layout design.

47
00:02:41,530 --> 00:02:43,530
All right, that was great, thanks a lot.
