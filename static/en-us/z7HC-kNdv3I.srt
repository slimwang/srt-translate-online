1
00:00:00,180 --> 00:00:02,313
So we have seen that using the ROB

2
00:00:02,313 --> 00:00:06,263
and something like the Tomasulo algorithm, we can enforce

3
00:00:06,263 --> 00:00:10,622
the order of dependencies on registers between instructions.

4
00:00:10,622 --> 00:00:14,120
The question still remains what about memory access ordering?

5
00:00:14,120 --> 00:00:16,050
We have a lot of store instructions. Do

6
00:00:16,050 --> 00:00:18,180
they really need to be done strictly in program

7
00:00:18,180 --> 00:00:20,380
order, or can we do something about reordering

8
00:00:20,380 --> 00:00:24,860
them too? So far, we have eliminated control dependencies,

9
00:00:24,860 --> 00:00:28,790
using branch prediction, and eliminated false dependencies

10
00:00:28,790 --> 00:00:31,570
on registers, that is dependencies that go through

11
00:00:31,570 --> 00:00:34,620
registers, and we have eliminated the false dependencies

12
00:00:34,620 --> 00:00:38,680
through register renaming. Next, we learn how to

13
00:00:38,680 --> 00:00:41,620
obey read after write register dependencies or

14
00:00:41,620 --> 00:00:44,230
through dependencies. And we do that through Tamasulo-like

15
00:00:44,230 --> 00:00:47,250
scheduling. So we have instructions wait in reservation

16
00:00:47,250 --> 00:00:50,250
stations until their dependencies have been satisfied and

17
00:00:50,250 --> 00:00:52,470
they can proceed to execution out of program

18
00:00:52,470 --> 00:00:56,330
order. Note that the data dependence handling that

19
00:00:56,330 --> 00:00:58,780
we have done so for, however, is only

20
00:00:58,780 --> 00:01:02,734
for register dependencies. That is when one instruction

21
00:01:02,734 --> 00:01:04,846
is producing a value in a register that

22
00:01:04,846 --> 00:01:08,378
another is going to be using. But what about

23
00:01:08,378 --> 00:01:11,910
memory dependencies? If we have a store and

24
00:01:11,910 --> 00:01:15,330
then a load, there could also be a dependence

25
00:01:15,330 --> 00:01:19,020
between the memory value written by the store and

26
00:01:19,020 --> 00:01:22,640
then the value read by the load. If these two

27
00:01:22,640 --> 00:01:25,390
addresses are the same address then actually the load

28
00:01:25,390 --> 00:01:27,430
needs to get the value from the store and in

29
00:01:27,430 --> 00:01:30,080
which case we should be doing them in order.

30
00:01:30,080 --> 00:01:33,088
However, if these two addresses are not the same, just

31
00:01:33,088 --> 00:01:36,416
like with registers, we actually don't need to maintain the

32
00:01:36,416 --> 00:01:40,346
program order between this accesses. However, we have not seen

33
00:01:40,346 --> 00:01:43,750
anything that handle out of order execution of memory instruction.
