1
00:00:00,440 --> 00:00:02,600
Now, let's go ahead and
declare some variables for

2
00:00:02,600 --> 00:00:04,820
each of the primitive
types that we saw earlier.

3
00:00:05,939 --> 00:00:09,410
So now we have a couple more variables
and I've explicitly stated the type for

4
00:00:09,410 --> 00:00:12,200
each, even though it's really
not necessary, except for

5
00:00:12,200 --> 00:00:15,300
the case of the Float and the Double.

6
00:00:15,300 --> 00:00:18,470
The Character would be the same as well,
so it'll leave that one.

7
00:00:18,470 --> 00:00:21,960
I'm want to remove all the other
ones really quick, but

8
00:00:21,960 --> 00:00:25,150
the rest of them I think Swift font file
are just fine and we can double check.

9
00:00:26,670 --> 00:00:28,160
So that's an outline we wanted.

10
00:00:30,740 --> 00:00:34,190
That's the string and that's a boolean.

11
00:00:34,190 --> 00:00:36,980
Now what about these float and
double types?

12
00:00:36,980 --> 00:00:41,050
They seem to represent pretty similar
values their floating point numbers.

13
00:00:41,050 --> 00:00:42,702
But why would you use
one over the other?

14
00:00:42,702 --> 00:00:45,530
Well that comes down to
an issue of precision and

15
00:00:45,530 --> 00:00:49,380
being able to most accurately
represent a floating point number.

16
00:00:49,380 --> 00:00:52,910
Truth be told computers actually have
a pretty difficult time doing this.

17
00:00:52,910 --> 00:00:56,080
Usually computers even have special
hardware dedicated just two

18
00:00:56,080 --> 00:00:58,020
floating point numbers.

19
00:00:58,020 --> 00:01:01,860
Typically you want to use double instead
of float because it can handle floating

20
00:01:01,860 --> 00:01:07,410
point numbers at a higher precision,
but double isn't always better.

21
00:01:07,410 --> 00:01:11,160
In cases where speed may be more
important than the accuracy of

22
00:01:11,160 --> 00:01:14,201
a floating point number,
you may want to choose Float instead.

23
00:01:15,520 --> 00:01:18,030
Next let's try changing
a variable's value.

24
00:01:18,030 --> 00:01:19,400
Let's change my jersey number.

25
00:01:20,410 --> 00:01:22,660
Since we've already
cleared my jersey number,

26
00:01:22,660 --> 00:01:25,710
we can just change it with
the simple syntax here.

27
00:01:25,710 --> 00:01:27,710
We have the name of the variable.

28
00:01:27,710 --> 00:01:30,000
An equal sign and
then the new value that we want.

29
00:01:31,360 --> 00:01:33,340
So following this change,

30
00:01:33,340 --> 00:01:38,390
we can see that my jersey number went
from being 5 here to being 80 here.

31
00:01:38,390 --> 00:01:41,190
And we can keep doing this
as many times as we like.

32
00:01:41,190 --> 00:01:45,750
However when we change a variable's
value we must ensure that the new value

33
00:01:45,750 --> 00:01:47,210
is of the right type.

34
00:01:47,210 --> 00:01:50,620
So in this case every single
one of these are integers so

35
00:01:50,620 --> 00:01:52,810
the compiler wouldn't complain.

36
00:01:52,810 --> 00:01:54,410
But let's try something
a little bit different.

37
00:01:54,410 --> 00:01:57,510
In this case we're going to try
to change my jersey number to

38
00:01:57,510 --> 00:02:00,160
something that would typically
be inferred as a string.

39
00:02:01,430 --> 00:02:02,530
And this is a problem.

40
00:02:02,530 --> 00:02:04,310
We can see that the compiler's
complaining, and

41
00:02:04,310 --> 00:02:09,900
it says we cannot assign a value of
type string to value of type n because

42
00:02:09,900 --> 00:02:14,390
my jersey number was declared as
an injured it expects an integer.

43
00:02:14,390 --> 00:02:18,630
And the reason this is a problem is
because Swift is strongly typed or

44
00:02:18,630 --> 00:02:21,720
we might say that Swift is
a strongly typed language.

45
00:02:21,720 --> 00:02:24,420
This means that once a variables
type has been declared or

46
00:02:24,420 --> 00:02:27,130
set it cannot change.

47
00:02:27,130 --> 00:02:31,349
So if you look at where my jersey
number is declared we know that it's

48
00:02:31,349 --> 00:02:34,240
an integer, and it can't change.

49
00:02:34,240 --> 00:02:36,650
Therefore it can't be
set to the string here.
