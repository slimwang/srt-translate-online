1
00:00:00,340 --> 00:00:03,380
Hey Jake, did you get the GIF
responses happening for JPEGs only?

2
00:00:03,380 --> 00:00:05,720
>> I certainly did and
here's how I did it.

3
00:00:05,720 --> 00:00:09,120
Now we haven't actually covered how
to get the URL of a request yet.

4
00:00:09,120 --> 00:00:11,860
So this task was a little bit trickier.

5
00:00:11,860 --> 00:00:13,090
I've been doing service work for so

6
00:00:13,090 --> 00:00:15,820
long that I have the API burned
into the back of my brain.

7
00:00:15,820 --> 00:00:19,140
But if I didn't,
here's how I would have figured it out.

8
00:00:19,140 --> 00:00:20,940
We've already seen event.request.

9
00:00:20,940 --> 00:00:23,060
But what other properties does it have?

10
00:00:23,060 --> 00:00:26,670
One way to find out is to go to
Google and search for MDN request.

11
00:00:27,740 --> 00:00:30,070
MDN is a great place for documentation.

12
00:00:30,070 --> 00:00:32,000
And there there's a result
about the fetch API.

13
00:00:33,070 --> 00:00:37,390
In there it tells me that request.url
is the URL of the request.

14
00:00:37,390 --> 00:00:38,570
Kind of obvious now we see it.

15
00:00:39,610 --> 00:00:42,710
Alternatively, I could have
added a console log and

16
00:00:42,710 --> 00:00:47,810
logged out event.request, as we were
before, and then refresh the page.

17
00:00:47,810 --> 00:00:52,470
And because the console is
cleared when the page navigates,

18
00:00:52,470 --> 00:00:54,400
we're losing the log for
the page request.

19
00:00:55,460 --> 00:00:58,710
If I preserve the log and
refresh again, there it is.

20
00:01:00,240 --> 00:01:03,340
And inside the request object there
are loads of details in there,

21
00:01:03,340 --> 00:01:05,330
one of which is the URL,
and it's a string.

22
00:01:06,360 --> 00:01:10,320
So with this knowledge back in
the code I can use an if statement.

23
00:01:10,320 --> 00:01:15,630
So respond with is only called
if the URL ends with .jpg.

24
00:01:15,630 --> 00:01:19,620
Ends with is a relatively new string
method, but it's really useful.

25
00:01:21,130 --> 00:01:23,500
Since service work is only
run in modern browsers,

26
00:01:23,500 --> 00:01:27,130
we can make use of some of the more
modern JavaScript features.

27
00:01:27,130 --> 00:01:32,830
Back in the browser with force
update enabled, I hit refresh and

28
00:01:32,830 --> 00:01:35,970
the page loads as normal, but
all the images have been intercepted.

29
00:01:37,030 --> 00:01:40,310
So we started handling requests
dynamically depending on URL.

30
00:01:40,310 --> 00:01:42,480
But there's a lot more we can do here.

31
00:01:42,480 --> 00:01:46,040
Join us in the next chapter to discover
some request hijacking patents.
