1
00:00:00,210 --> 00:00:02,210
So now when we have written all this code,

2
00:00:02,210 --> 00:00:04,610
let's look at how to scale your application, using

3
00:00:04,610 --> 00:00:09,048
modules. Modules are a serious heavy-duty function within App

4
00:00:09,048 --> 00:00:12,430
Engine and they allow you to partition your code, have

5
00:00:12,430 --> 00:00:15,940
better control over scalability, and do version control and

6
00:00:15,940 --> 00:00:19,590
online upgrades. For simplicity, we did not use modules when

7
00:00:19,590 --> 00:00:22,460
building Conference Central, but it is something we strongly

8
00:00:22,460 --> 00:00:25,270
suggest you start exploring on your own. By looking at

9
00:00:25,270 --> 00:00:29,100
the online documentation. All right, let's get started. When

10
00:00:29,100 --> 00:00:31,900
you create an App Engine application using modules, it will

11
00:00:31,900 --> 00:00:34,650
conceptually be structured like a tree. At the very

12
00:00:34,650 --> 00:00:38,510
top, we have the root, which is your application, and

13
00:00:38,510 --> 00:00:40,570
your application is made up of a number of

14
00:00:40,570 --> 00:00:45,140
modules, in this example two. A module groups three concepts.

15
00:00:45,140 --> 00:00:48,180
Code related to the module. The instance class that

16
00:00:48,180 --> 00:00:50,350
should be used to execute the code, this is the

17
00:00:50,350 --> 00:00:52,430
speed of the CPU, and the amount of memory

18
00:00:52,430 --> 00:00:56,120
that should be used. The scalability parameters including the number

19
00:00:56,120 --> 00:00:58,823
of instances to start and their life cycle. So

20
00:00:58,823 --> 00:01:02,970
a module groups code to be executed, the performance resources

21
00:01:02,970 --> 00:01:05,450
and the scalability and instance life cycle you want to

22
00:01:05,450 --> 00:01:08,260
have. Each module can then have a number of different

23
00:01:08,260 --> 00:01:11,700
versions associated with it. A version is essentially a

24
00:01:11,700 --> 00:01:15,170
version of your code being maintained in the module. So,

25
00:01:15,170 --> 00:01:17,760
after you have deployed your application into production you

26
00:01:17,760 --> 00:01:20,180
can deploy new versions of your code and you

27
00:01:20,180 --> 00:01:23,550
can have multiple versions running in parallel, and gradually

28
00:01:23,550 --> 00:01:26,920
migrate traffic from the old version to the new. This

29
00:01:26,920 --> 00:01:30,100
capability allows you to do version upgrades without having

30
00:01:30,100 --> 00:01:33,470
to bring down your application. Something that is extremely difficult

31
00:01:33,470 --> 00:01:36,500
to do without App Engine. And finally, there are

32
00:01:36,500 --> 00:01:41,060
instances. An instance is what actually executes the application code.

33
00:01:41,060 --> 00:01:43,460
And if you want to scale your application, App Engine

34
00:01:43,460 --> 00:01:46,690
can fire up more instances to manage the additional load.

35
00:01:46,690 --> 00:01:49,450
And since the instance class and the number of instances

36
00:01:49,450 --> 00:01:53,040
define the performance and scalability of a module. The capacity of

37
00:01:53,040 --> 00:01:56,040
your application depends on the instances class and the number

38
00:01:56,040 --> 00:01:59,270
of instances you run. This is configured on the module

39
00:01:59,270 --> 00:02:01,840
level, and that is exactly what we will look at

40
00:02:01,840 --> 00:02:06,220
now. How to configure a module. Lets start looking at two

41
00:02:06,220 --> 00:02:10,590
scaling options for modules. Manual Scaling and Automatic Scaling.

42
00:02:10,590 --> 00:02:13,950
These specify different scale up and scale down characteristics of

43
00:02:13,950 --> 00:02:17,910
instances. Manual scaling allows you to create instances that are

44
00:02:17,910 --> 00:02:21,240
always up and running and that never terminates. Because of

45
00:02:21,240 --> 00:02:23,600
this, they don't have the ten minute execution limit

46
00:02:23,600 --> 00:02:26,360
with they process tasks or cron jobs. Since they are

47
00:02:26,360 --> 00:02:28,870
always up and running, they can work for any amount

48
00:02:28,870 --> 00:02:31,310
of time. And that means that they are great to

49
00:02:31,310 --> 00:02:33,660
use if you have long running background tasks or

50
00:02:33,660 --> 00:02:36,370
cron jobs. The only thing you need to configure for

51
00:02:36,370 --> 00:02:39,290
manual scaling is the number of instances you want

52
00:02:39,290 --> 00:02:42,710
the module to start. That's manual scaling. Let's now talk

53
00:02:42,710 --> 00:02:46,630
about automatic scaling. Automatic scaling is the option that

54
00:02:46,630 --> 00:02:50,620
allows App Engine to automatically scale your application up and

55
00:02:50,620 --> 00:02:53,610
down depending on the load. The first two options

56
00:02:53,610 --> 00:02:56,770
you can specify for automatic scaling is the minimum and

57
00:02:56,770 --> 00:03:00,390
maximum number of idle instances you want. What does

58
00:03:00,390 --> 00:03:03,740
this mean? Why would you want to have idle instances?

59
00:03:03,740 --> 00:03:07,110
Well, instances have a startup time and if you

60
00:03:07,110 --> 00:03:09,730
don't want your users to wait for the response while

61
00:03:09,730 --> 00:03:12,000
your application needs to scale up by starting new

62
00:03:12,000 --> 00:03:15,460
instances, and it could be good to have idle instances

63
00:03:15,460 --> 00:03:18,730
available if your application needs to scale up. So your

64
00:03:18,730 --> 00:03:22,240
users don't have to wait for more instances to start.

65
00:03:22,240 --> 00:03:24,490
Let's now look at latency. Where you can specify

66
00:03:24,490 --> 00:03:28,830
the minimum and maximum pending latency allowed for requests. These

67
00:03:28,830 --> 00:03:32,480
parameters work as follows. So let's say a request comes

68
00:03:32,480 --> 00:03:35,900
into your application right here, and there's no instance available

69
00:03:35,900 --> 00:03:38,580
to process it. Then it is put in a wait

70
00:03:38,580 --> 00:03:41,680
queue. App Engine now has a decision to make. When

71
00:03:41,680 --> 00:03:44,970
to scale up your application using more instances. Well, to

72
00:03:44,970 --> 00:03:47,500
begin with, it will wait for some time to see

73
00:03:47,500 --> 00:03:50,030
if any of the existing instances become available to

74
00:03:50,030 --> 00:03:53,380
process their request. This is called a minimum pending

75
00:03:53,380 --> 00:03:57,500
latency, if this time passes, App Engine is considering

76
00:03:57,500 --> 00:04:00,680
starting a new instance to manage the request. And if

77
00:04:00,680 --> 00:04:03,570
the next pending latency time expires, then a new

78
00:04:03,570 --> 00:04:06,850
instance would be started for sure to manage the load.

79
00:04:06,850 --> 00:04:09,270
This is how App Engine performs a scale up

80
00:04:09,270 --> 00:04:12,620
of your application. Rather than specifying a number for these

81
00:04:12,620 --> 00:04:15,790
four parameters, you can all set them to automatic.

82
00:04:15,790 --> 00:04:18,279
In such case, App Engine will set them according

83
00:04:18,279 --> 00:04:22,280
to the dynamic analysis it performs. Finally, both manual

84
00:04:22,280 --> 00:04:25,601
and automatic scaling have a common configuration element. Which is

85
00:04:25,601 --> 00:04:29,290
the Instance Class. The instance class specifies the speed

86
00:04:29,290 --> 00:04:32,000
of the CPU and the amount of memory to

87
00:04:32,000 --> 00:04:34,760
use for each of the instances started. Check out

88
00:04:34,760 --> 00:04:38,750
the developer documentation for more details on the options available.

89
00:04:38,750 --> 00:04:41,215
As you probably see by now, modules is

90
00:04:41,215 --> 00:04:44,260
heavy-duty stuff. And in addition to the scaling options

91
00:04:44,260 --> 00:04:46,730
we looked at, it also has versions that

92
00:04:46,730 --> 00:04:49,970
we briefly touched on. Versions allow you to perform

93
00:04:49,970 --> 00:04:52,670
online upgrades on part of your system without

94
00:04:52,670 --> 00:04:56,870
any service disruption. Without App Engine, doing automatic scaling

95
00:04:56,870 --> 00:05:00,710
and dynamic upgrades are extremely difficult problems to solve.

96
00:05:00,710 --> 00:05:03,100
So make sure that you use this great functionality.
