1
00:00:00,000 --> 00:00:03,000
So this this is where the peer-to-peer network is useful.

2
00:00:03,000 --> 00:00:05,000
Every time someone receives a transaction,

3
00:00:05,000 --> 00:00:07,000
they don't just accept it.

4
00:00:07,000 --> 00:00:09,000
What they do is they send it into the peer-to-peer network.

5
00:00:09,000 --> 00:00:12,000
So when someone wants to verify a coin

6
00:00:12,000 --> 00:00:15,000
what they need to do is send it into the peer-to-peer network.

7
00:00:15,000 --> 00:00:18,000
Every transaction in that coin can be verified

8
00:00:18,000 --> 00:00:21,000
by all the other members of the network,

9
00:00:21,000 --> 00:00:25,000
and before the transaction's considered valid,

10
00:00:25,000 --> 00:00:29,000
we need to know that that coin hasn't been already spent in some other way.

11
00:00:29,000 --> 00:00:32,000
So there's two important parts to this.

12
00:00:32,000 --> 00:00:36,000
That means all the nodes must agree on all the transactions.

13
00:00:36,000 --> 00:00:39,000
That requires some sort of timestamp.

14
00:00:39,000 --> 00:00:42,000
Nodes are going to receive messages at different times.

15
00:00:42,000 --> 00:00:48,000
We need to know it's the case that if this coin was spent twice,

16
00:00:48,000 --> 00:00:52,000
that before this one validates the transaction--

17
00:00:52,000 --> 00:00:55,000
We need to ensure that if someone attempted to spend a coin twice

18
00:00:55,000 --> 00:00:58,000
both transactions wouldn't be validated

19
00:00:58,000 --> 00:01:00,000
by having different parts of the network

20
00:01:00,000 --> 00:01:03,000
have different views of that history of all the transactions.

21
00:01:03,000 --> 00:01:06,000
So how do we provide this timestamp?

22
00:01:06,000 --> 00:01:08,000
And we need to remember that

23
00:01:08,000 --> 00:01:10,000
some of these nodes might be malicious.

24
00:01:10,000 --> 00:01:12,000
We have no way to know that all the nodes are trusted.

25
00:01:12,000 --> 00:01:14,000
Anyone who wants can join the network.

26
00:01:14,000 --> 00:01:16,000
We just need to have some honest parties

27
00:01:16,000 --> 00:01:18,000
to validate the transactions.

28
00:01:18,000 --> 00:01:21,000
But we need to know that dishonest parties

29
00:01:21,000 --> 00:01:24,000
can't invalidate the history of transactions.

30
00:01:24,000 --> 00:01:27,000
The key to this is requiring a proof of work.

31
00:01:27,000 --> 00:01:29,000
For each timestemp we're going to have a new block,

32
00:01:29,000 --> 00:01:32,000
and we need to know that creating those new blocks requires work.

33
00:01:32,000 --> 00:01:36,000
If it requires enough work to increase the timestamp,

34
00:01:36,000 --> 00:01:39,000
then it's unlikely that a malicious user

35
00:01:39,000 --> 00:01:42,000
can increase the timestamp faster than the whole network.

36
00:01:42,000 --> 00:01:44,000
So how do we make that hard?

37
00:01:44,000 --> 00:01:48,000
We need some kind of proof--of-work to be embedded in the timestamps.

38
00:01:48,000 --> 00:01:50,000
So here's a way to do a proof-of-work.

39
00:01:50,000 --> 00:01:53,000
In order to prove you've done some amount of work,

40
00:01:53,000 --> 00:01:56,000
you need to find a value of X

41
00:01:56,000 --> 00:01:59,000
where the hash of X starts with some number of 0s.

42
00:01:59,000 --> 00:02:04,000
Doing that requires work if this is a good cryptographic hash function.

43
00:02:04,000 --> 00:02:07,000
At least if we have a random oracle assumption about that hash function,

44
00:02:07,000 --> 00:02:10,000
the only way to find such an X value

45
00:02:10,000 --> 00:02:12,000
is to keep guessing and looking at that output.

46
00:02:12,000 --> 00:02:16,000
So you need to do the amount of work necessary to find that output.

47
00:02:16,000 --> 00:02:19,000
So how much work is that?

48
00:02:19,000 --> 00:02:24,000
How many times do we expect to need to compute the hash function H

49
00:02:24,000 --> 00:02:28,000
in order to find a value of X where H of X starts with 0 to the 10--

50
00:02:28,000 --> 99:59:59,999
starts with 10 consecutive 0s?
