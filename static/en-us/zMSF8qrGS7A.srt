1
00:00:00,000 --> 00:00:03,000
[Norvig] So here's my solution. You can look at the code.

2
00:00:03,000 --> 00:00:06,000
I think it's pretty self-explanatory, so I won't go through all the details.

3
00:00:06,000 --> 00:00:08,000
I'll just mention a few things.

4
00:00:08,000 --> 00:00:14,000
First of all, notice that it's returning a tuple consisting of the major rank

5
00:00:14,000 --> 00:00:17,000
and then the tiebreakers, and it just goes through them all in order--

6
00:00:17,000 --> 00:00:20,000
8, 7, 6, 5, 4, 3, 2, 1, 0.

7
00:00:20,000 --> 00:00:26,000
And then the interesting part is, 1, how do you determine what major rank it is?

8
00:00:26,000 --> 00:00:31,000
So we test to see if it's a straight flush. Then it's number 8. That's a straight flush.

9
00:00:31,000 --> 00:00:35,000
Another example: If you have 3 of a kind and you also have 2 of a kind,

10
00:00:35,000 --> 00:00:37,000
then that's a full house, which is number 6.

11
00:00:37,000 --> 00:00:39,000
And then what are the tiebreakers?

12
00:00:39,000 --> 00:00:43,000
They're the important cards first that are part of the thing.

13
00:00:43,000 --> 00:00:48,000
So with a full house the most important tiebreaker is the 3 of a kind,

14
00:00:48,000 --> 00:00:52,000
and then the next most important is the 2 of a kind,

15
00:00:52,000 --> 00:00:57,000
and we pick out what each one is, put them in that return value to break the ties.

16
00:00:57,000 --> 00:01:03,000
And a final thing I'll note is that card_ranks is defined to return the ranks in sorted order.

17
00:01:03,000 --> 00:01:07,000
so that, for example, when you have nothing, just returning the ranks,

18
00:01:07,000 --> 00:01:11,000
that means that the highest card is first and that's going to be the first tiebreaker,

19
00:01:11,000 --> 00:01:14,000
the next highest card is second and that's the next tiebreaker and so on.

20
00:01:14,000 --> 99:59:59,999
And that's all you need to know.
