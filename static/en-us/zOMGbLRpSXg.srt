1
00:00:00,000 --> 00:00:04,000
Now that we remember what these operators do--this is actually doubling y

2
00:00:04,000 --> 00:00:07,000
by moving it one position to the left in binary.

3
00:00:07,000 --> 00:00:10,000
This is halving y or rounding down and halving y for x.

4
00:00:10,000 --> 00:00:14,000
You may recall that this percent sign is the modulus operator.

5
00:00:14,000 --> 00:00:18,000
What this is saying is take x, divide it by 2 and tell me what the remainder is.

6
00:00:18,000 --> 00:00:20,000
If it's 1 then do this.

7
00:00:20,000 --> 00:00:23,000
What does it mean for a remainder to be one? It means that it's an odd number.

8
00:00:23,000 --> 00:00:27,000
Whenever x is odd, it adds y to z.

9
00:00:27,000 --> 00:00:30,000
Then no matter what it doubles y, halves x, and goes back to the loop

10
00:00:30,000 --> 00:00:32,000
and continues doing this until x is 0.

11
00:00:32,000 --> 00:00:35,000
Unless this is obvious to you, this may seem a little bit magical again.

12
00:00:35,000 --> 00:00:38,000
Why would this actually be equivalent to naive?

13
00:00:38,000 --> 00:00:40,000
Why would this actually be computing multiplication?

14
00:00:40,000 --> 00:00:42,000
Let's just make sure that it does first.

15
00:00:42,000 --> 00:00:49,000
Let's print russian(14, 11).

16
00:00:49,000 --> 00:00:53,000
We'll run that and see what it gives us--154. All right.

17
00:00:53,000 --> 00:00:55,000
That is, in fact, 14 * 11.

18
00:00:55,000 --> 00:00:58,000
We're going to need to step through and try to understand why it works out the way that it does.

19
00:00:58,000 --> 00:01:01,000
If we give russian the input (14, 11),

20
00:01:01,000 --> 00:01:05,000
it's going to assign these to x and y and start off the z at 0.

21
00:01:05,000 --> 00:01:08,000
Let's take a look at that. Now it's going to go through the while loop.

22
00:01:08,000 --> 00:01:12,000
On each iteration, it's going to check to see whether x is odd or even.

23
00:01:12,000 --> 00:01:15,000
If it's odd, then it's going to add y to z.

24
00:01:15,000 --> 00:01:17,000
We start off at 14, which is not odd.

25
00:01:17,000 --> 00:01:21,000
What does it tell us to do? It tells us to double y and halve x.

26
00:01:21,000 --> 00:01:24,000
We get down to 7, 22, and 0 remains 0.

27
00:01:24,000 --> 00:01:26,000
The next time through we see that x is odd,

28
00:01:26,000 --> 00:01:28,000
so we add y into z. Makes it a 22.

29
00:01:28,000 --> 00:01:30,000
We halve x and double y.

30
00:01:30,000 --> 00:01:32,000
In this case halving and rounding down.

31
00:01:32,000 --> 00:01:35,000
That gets us a 3 and a 44.

32
00:01:35,000 --> 00:01:38,000
The next time through the while loop we see that x is 3, which is odd.

33
00:01:38,000 --> 00:01:42,000
That tells us to add 44 into z, giving it a total of 66.

34
00:01:42,000 --> 00:01:45,000
Then we halve x, rounding down and double y.

35
00:01:45,000 --> 00:01:48,000
Go back up to the top of the while loop, we see x is odd again.

36
00:01:48,000 --> 00:01:52,000
We add y into z. Then we halve x, rounding down and double y.

37
00:01:52,000 --> 00:01:55,000
At which point x becomes 0, and it returns the value of z,

38
00:01:55,000 --> 00:01:59,000
which lo and behold is 154. It seems to have done the right thing.

39
00:01:59,000 --> 00:02:03,000
What we've really done here is we've added several values of y.

40
00:02:03,000 --> 00:02:07,000
As x is counting down, each of the times x becomes odd we add those together.

41
00:02:07,000 --> 00:02:09,000
It ends up being the sum of those three numbers.

42
00:02:09,000 --> 00:02:11,000
You have to admit that's kind of cool, right?

43
00:02:11,000 --> 99:59:59,999
It's somehow doing the equivalent of 14 * 11, but not the way we would normally do it.
