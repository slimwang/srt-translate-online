1
00:00:00,470 --> 00:00:02,870
Now that the user had logged in to

2
00:00:02,870 --> 00:00:06,510
a client work station, Venus will establish an

3
00:00:06,510 --> 00:00:09,670
RPC session, on behalf of the client. And

4
00:00:09,670 --> 00:00:12,590
in order to establish the RPC session, the

5
00:00:12,590 --> 00:00:15,700
following message exchange is going to happen. And this

6
00:00:15,700 --> 00:00:18,500
is what is called the bind operation between

7
00:00:18,500 --> 00:00:21,490
the client and the server. So what Venus

8
00:00:21,490 --> 00:00:25,710
is going to do is send the client identity and

9
00:00:25,710 --> 00:00:30,990
an encrypted cipher. The client identity, as I mentioned earlier, in

10
00:00:30,990 --> 00:00:35,220
private keycryptal systems, you have to send it in clear text so that the server

11
00:00:35,220 --> 00:00:40,210
knows the identity of the client and in order to establish a new

12
00:00:40,210 --> 00:00:45,390
RPC session, Venus will use the secret token as the

13
00:00:45,390 --> 00:00:50,800
client identity. And it will use the HKC, the handshake

14
00:00:50,800 --> 00:00:56,560
key for the client that was contained in the clear token data structure

15
00:00:56,560 --> 00:01:02,530
that was given back to the work station by the server as part of executing

16
00:01:02,530 --> 00:01:07,815
the log in process. That is the key that will be used for encrypting

17
00:01:07,815 --> 00:01:11,589
the starting message for the RPC session

18
00:01:11,589 --> 00:01:16,450
establishment. Now what exactly is the massage that

19
00:01:16,450 --> 00:01:22,140
is being sent. Well all there is sent for initiating this RPC session

20
00:01:22,140 --> 00:01:29,850
establishment, is a random number which is new for each RPC session that Venus

21
00:01:29,850 --> 00:01:35,300
is establishing on behalf of this client. Every time it wants to establish a new

22
00:01:35,300 --> 00:01:42,100
RPC session within a login session, it creates a new random number and

23
00:01:42,100 --> 00:01:45,775
encrypts it using the handshake key. That's

24
00:01:45,775 --> 00:01:48,700
the cipher text. And the secret token

25
00:01:48,700 --> 00:01:55,530
is the client ID, and that's the message that goes from virtue to vice, the

26
00:01:55,530 --> 00:02:00,980
server. So when this message arrives at the server, how will the server decrypt

27
00:02:00,980 --> 00:02:04,190
this message? Well, the client ID is

28
00:02:04,190 --> 00:02:07,640
the secret token. Recall that the secret token

29
00:02:07,640 --> 00:02:11,430
is nothing but an encryption of the clear token,

30
00:02:11,430 --> 00:02:13,770
with a key that is known only to the

31
00:02:13,770 --> 00:02:17,380
server, and therefore, what the server can do is

32
00:02:17,380 --> 00:02:20,660
take the secret token, decrypt it using the key that

33
00:02:20,660 --> 00:02:24,850
it has and once it decrypts it, it gets

34
00:02:24,850 --> 00:02:27,600
this clear token data structure and from the clear token

35
00:02:27,600 --> 00:02:30,070
data structure, it can say well what is the

36
00:02:30,070 --> 00:02:33,210
key that is contained in this clear token data structure,

37
00:02:33,210 --> 00:02:40,030
take the key and decrypt this message. Cause, that key is HKC, and that

38
00:02:40,030 --> 00:02:47,330
is how the server can get the message that has been sent as the initiation

39
00:02:47,330 --> 00:02:52,580
of the RPC session. So in particular, what the server has gotten now is

40
00:02:52,580 --> 00:02:58,440
the random number that was sent to it by Venus Xr. Now what the server does,

41
00:02:58,440 --> 00:03:05,550
is it takes this random number, increments it by 1, and also adds a new random

42
00:03:05,550 --> 00:03:11,470
number, Yr, and that is a message that it is going to send back to the client.

43
00:03:11,470 --> 00:03:13,370
It has to encrypt this message of course,

44
00:03:13,370 --> 00:03:16,780
because its going on the wire, which is insecure.

45
00:03:16,780 --> 00:03:19,010
So it's going to encrypt it using a

46
00:03:19,010 --> 00:03:24,010
key, a handshake key which we'll call HKS and

47
00:03:24,010 --> 00:03:31,650
by design, HKC and HKS are exactly the same. So in other words, whatever is the

48
00:03:31,650 --> 00:03:33,380
handshake key that has been given to the

49
00:03:33,380 --> 00:03:37,550
client in the clear token, is the same handshake

50
00:03:37,550 --> 00:03:40,010
key that the server is going to use

51
00:03:40,010 --> 00:03:42,570
to communicate information back to the client as

52
00:03:42,570 --> 00:03:46,236
well. So, it encrypts this message with this

53
00:03:46,236 --> 00:03:50,540
handshake key and sends it over to the client.

54
00:03:50,540 --> 00:03:52,630
So what is the purpose of this message?

55
00:03:52,630 --> 00:03:55,430
When this message comes over to the client,

56
00:03:55,430 --> 00:03:58,850
the client can decrypt this message. How? It's

57
00:03:58,850 --> 00:04:03,310
going to use HKC which is the handshake key

58
00:04:03,310 --> 00:04:09,540
that it knows will be used by a genuine server to encode the message and send it

59
00:04:09,540 --> 00:04:12,340
to the client, and so it can use

60
00:04:12,340 --> 00:04:15,580
HKC to decrypt this message and once it decrypts

61
00:04:15,580 --> 00:04:20,730
this message, it gets these two numbers. There's Xr

62
00:04:20,730 --> 00:04:25,460
plus 1, that is the original random number that this guy sent over to the server

63
00:04:25,460 --> 00:04:30,690
incremented by 1. Now what is the purpose served by this

64
00:04:30,690 --> 00:04:35,840
number, Xr plus 1. It actually establishes to the client that the

65
00:04:35,840 --> 00:04:41,000
server is genuine. Anybody could replay a message

66
00:04:41,000 --> 00:04:48,040
that they see on the wire, but for this message to have the right content, what

67
00:04:48,040 --> 00:04:53,860
the client is expecting is that the response that the client is going to get for

68
00:04:53,860 --> 00:04:57,990
the original message that was initiating the RPC

69
00:04:57,990 --> 00:05:00,970
session. is that the response from the server

70
00:05:00,970 --> 00:05:03,790
is going to contain a number that is 1

71
00:05:03,790 --> 00:05:06,500
greater than the random number that it sent

72
00:05:06,500 --> 00:05:11,164
the server in the first place. So, if this number, Xr plus 1, is what the

73
00:05:11,164 --> 00:05:15,212
client was expecting, then it establishes that the

74
00:05:15,212 --> 00:05:19,040
server is genuine. So this goes back to

75
00:05:19,040 --> 00:05:22,790
what I said about authentication of the server.

76
00:05:22,790 --> 00:05:24,774
That is one of the challenges that the

77
00:05:24,774 --> 00:05:27,300
[INAUDIBLE] system has. This is the way the

78
00:05:27,300 --> 00:05:33,360
virtue workstation, the Venus process on the virtue workstation

79
00:05:33,360 --> 00:05:36,180
on behalf of the client can establish the

80
00:05:36,180 --> 00:05:40,720
genuineness of the server that this workstation is talking

81
00:05:40,720 --> 00:05:42,500
to. Or in other words, it's not a

82
00:05:42,500 --> 00:05:45,050
Trojan Horse that is sending this message. But it

83
00:05:45,050 --> 00:05:47,680
is genuine server that is sending this message

84
00:05:47,680 --> 00:05:52,640
because this field is exactly what Venus expected it

85
00:05:52,640 --> 00:05:55,260
to be. Now what is this number? This is

86
00:05:55,260 --> 00:05:58,600
another random number that the server is sending as

87
00:05:58,600 --> 00:06:00,790
part of this message. Why is it sending

88
00:06:00,790 --> 00:06:03,530
this random number? It'll become clear in the

89
00:06:03,530 --> 00:06:06,350
next set of communication that's going on between

90
00:06:06,350 --> 00:06:10,200
Venus and Vice. Now once Venus has extracted

91
00:06:10,200 --> 00:06:17,100
this Yr from this message, what it is going to do is it is

92
00:06:17,100 --> 00:06:23,110
going to increment it by 1 and take that as a message, Yr plus 1, as a message,

93
00:06:23,110 --> 00:06:26,480
encrypt it using the handshake key, and send

94
00:06:26,480 --> 00:06:28,490
it over to this server. And when the

95
00:06:28,490 --> 00:06:32,745
server decrypts this message and extracts this field,

96
00:06:32,745 --> 00:06:37,900
it'll see whether this field is what it

97
00:06:37,900 --> 00:06:42,702
is expecting it to be. What the server is expecting is that this will be Yr

98
00:06:42,702 --> 00:06:45,295
plus 1. And if the client is genuine,

99
00:06:45,295 --> 00:06:48,470
then the client would've been able to extract Yr

100
00:06:48,470 --> 00:06:54,390
from this response that came from the server and generate Yr plus 1

101
00:06:54,390 --> 00:07:00,450
and send it over to the server. So in other words, this message coming to the

102
00:07:00,450 --> 00:07:04,040
server is establishing the genuineness of the

103
00:07:04,040 --> 00:07:08,080
client, because this original message that we

104
00:07:08,080 --> 00:07:10,700
saw could have been just a replay,

105
00:07:10,700 --> 00:07:13,640
meaning somebody sniffed the network, got a hold

106
00:07:13,640 --> 00:07:16,260
of this packet, and replayed it. But if

107
00:07:16,260 --> 00:07:19,840
they replayed it, then they would not have the

108
00:07:19,840 --> 00:07:21,780
key, and they would not have been able

109
00:07:21,780 --> 00:07:24,460
to decrypt this message. So the fact that the

110
00:07:24,460 --> 00:07:27,270
client was able to decrypt this message, extract

111
00:07:27,270 --> 00:07:30,790
Yr increment it and send a new message that

112
00:07:30,790 --> 00:07:34,280
contains Yr plus 1 to the server is

113
00:07:34,280 --> 00:07:38,350
authenticating to the server that the client is genuine.

114
00:07:38,350 --> 00:07:41,760
Just as this message established to the

115
00:07:41,760 --> 00:07:45,450
client that the server is genuine, similarly, this

116
00:07:45,450 --> 00:07:47,340
message coming from the client to the

117
00:07:47,340 --> 00:07:50,210
server is establishing to the server that the

118
00:07:50,210 --> 00:07:53,000
client is genuine. And this pair of

119
00:07:53,000 --> 00:07:58,010
communication that you are seeing is also avoiding

120
00:07:58,010 --> 00:08:01,460
replay attack either from the client to the

121
00:08:01,460 --> 00:08:04,200
server or from the server to the client.

122
00:08:04,200 --> 00:08:07,680
In both directions, we're avoiding it by

123
00:08:07,680 --> 00:08:12,530
this trick of generating a new random number.

124
00:08:12,530 --> 00:08:15,850
For establishing an RPC session and communicating it

125
00:08:15,850 --> 00:08:17,990
back and forth between the client and server.
