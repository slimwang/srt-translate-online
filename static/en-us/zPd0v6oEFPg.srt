1
00:00:00,250 --> 00:00:02,910
So let's see how should we do the correct out of order for

2
00:00:02,910 --> 00:00:07,900
the execution. We should execute out of order. We can broadcast out of order.

3
00:00:07,900 --> 00:00:10,750
But we should deposit values to registers in order.

4
00:00:10,750 --> 00:00:14,803
This is needed because if we deposit register values out of order.

5
00:00:14,803 --> 00:00:17,210
If subsequently we discover that one of the earlier,

6
00:00:17,210 --> 00:00:20,870
the instruction shouldn't have been done. Like, it has an exception or

7
00:00:20,870 --> 00:00:24,120
it's a branch misprediction then this instruction has already deposited it and

8
00:00:24,120 --> 00:00:26,920
it shouldn't have. So if we deposit in-order, this cannot happen.

9
00:00:26,920 --> 00:00:31,601
We will basically deposit results in order so once we get to deposit.

10
00:00:31,601 --> 00:00:34,800
That means that all the previous instructions have finished successfully and

11
00:00:34,800 --> 00:00:39,000
everything is fine. In Tomasulo's algorithm this is not happening in order.

12
00:00:39,000 --> 00:00:42,050
This is happening out of order which is why we have a problem.

13
00:00:42,050 --> 00:00:46,380
So what we need is a structure called reorder buffer. Even after issue,

14
00:00:46,380 --> 00:00:49,580
it remembers the program order. And it keeps the results of

15
00:00:49,580 --> 00:00:53,410
instructions until they're safe to write to registers. So basically, instead of

16
00:00:53,410 --> 00:00:56,680
writing to registers whenever the result is produced, it would end up in

17
00:00:56,680 --> 00:01:00,590
the reorder buffer. And then, we will go in order through the reorder buffer and

18
00:01:00,590 --> 00:01:04,690
deposit results into the registers. And once the result is deposited to

19
00:01:04,690 --> 00:01:07,200
the register, only then the instruction is considered fully done.
