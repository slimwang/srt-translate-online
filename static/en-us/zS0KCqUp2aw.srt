1
00:00:00,300 --> 00:00:04,376
Of course we do need to play basic sound clips. For Grits though we have robots

2
00:00:04,376 --> 00:00:08,968
moving around a 2D world making noise and causing mayhem. It doesn't make a lot

3
00:00:08,968 --> 00:00:12,316
of sense for a sound on the opposite side of the game map from the player to be

4
00:00:12,316 --> 00:00:17,876
just as loud as the one right next to them. So it's not quite enough for a game

5
00:00:17,876 --> 00:00:22,652
like Grits/g. What we need, is to also add the ability to adjust the volume

6
00:00:22,652 --> 00:00:27,717
based on the game state. And that solves the problem I just mentioned. With web

7
00:00:27,717 --> 00:00:32,156
audio, you can adjust the volume of sounds based on how far that are from a

8
00:00:32,156 --> 00:00:35,660
play position on the screen.

9
00:00:35,660 --> 00:00:36,316
[SOUND].

10
00:00:36,316 --> 00:00:41,581
This provides a much more realistic sound environment than you could achieve

11
00:00:41,581 --> 00:00:47,148
with, for example, the audio element. You can think of a lot more situations

12
00:00:47,148 --> 00:00:51,028
where it could be cool to have more involved sound effects. Maybe you want to

13
00:00:51,028 --> 00:00:52,532
apply an echo effect based on how sound

14
00:00:52,532 --> 00:00:52,861
[SOUND]

15
00:00:52,861 --> 00:00:56,303
reflects over that walls. Or apply a Doppler effect

16
00:00:56,303 --> 00:00:56,674
[SOUND]

17
00:00:56,674 --> 00:01:00,711
based on the velocity of a player or a projector. This can quickly get pretty

18
00:01:00,711 --> 00:01:05,268
involved. In Grits we simplify this and go for basic volume changes. The point

19
00:01:05,268 --> 00:01:08,684
is you need to think about what level of sound complexity is right for your

20
00:01:08,684 --> 00:01:10,760
game and your team.
