1
00:00:00,260 --> 00:00:06,620
So let' say I'm a proxy, and I want to put a key value pair in the coral DHT.

2
00:00:06,620 --> 00:00:11,690
I'm going to use the key-based routing algorithm to place the key at an

3
00:00:11,690 --> 00:00:14,930
appropriate node. What does that mean? Well, I'm

4
00:00:14,930 --> 00:00:18,440
going to take the key, and even if I

5
00:00:18,440 --> 00:00:25,380
have the node ID that is equal to this key, I'm not going to go to him directly.

6
00:00:25,380 --> 00:00:30,090
Remember that, the Coral, key based routing algorithm

7
00:00:30,090 --> 00:00:33,240
reducing the distance by half. So I'm going to

8
00:00:33,240 --> 00:00:35,510
go to a node that is half the

9
00:00:35,510 --> 00:00:39,840
distance to the desired destination. So the desired destination

10
00:00:39,840 --> 00:00:45,530
is n. I'll go to a node that is half the distance, say n over two, n over

11
00:00:45,530 --> 00:00:50,950
four, and so on, til I get to the desired destination. And as I'm going,

12
00:00:50,950 --> 00:00:53,290
making these calls, saying that, well I'm

13
00:00:53,290 --> 00:00:58,890
progressing towards this desired destination node, using that

14
00:00:58,890 --> 00:01:02,380
key base routing algorithm that uses the XR

15
00:01:02,380 --> 00:01:05,030
distance between the source of the destination halving

16
00:01:05,030 --> 00:01:11,610
the distance at every step. What I'm going to ask is, are you loaded or full?

17
00:01:11,610 --> 00:01:16,230
These two states that we talked about. And this guy says, no I'm not loaded or

18
00:01:16,230 --> 00:01:21,440
full, and here is the next hop you can go to. So I keep going for, forward. And

19
00:01:21,440 --> 00:01:26,250
if none of these guys say that they are loaded or full, I would

20
00:01:26,250 --> 00:01:31,290
eventually reach my desired destination and place the key value over

21
00:01:31,290 --> 00:01:36,360
there. However, when I do this hop, going

22
00:01:36,360 --> 00:01:42,060
from hazardous to one fourth of this and so on, somebody along the way

23
00:01:42,060 --> 00:01:45,110
may say that, look for this particular key

24
00:01:45,110 --> 00:01:48,710
that you're trying to place. I'm already full, all

25
00:01:48,710 --> 00:01:50,930
loaded, one of those two conditions is already

26
00:01:50,930 --> 00:01:54,590
applying to me. So this node responds back to

27
00:01:54,590 --> 00:02:01,640
me and says, I am either loaded, or full. If that is the response I get back,

28
00:02:01,640 --> 00:02:04,070
then what I'm going to infer from the

29
00:02:04,070 --> 00:02:07,260
response is that the rest of the distance going

30
00:02:07,260 --> 00:02:10,610
toward the destination is all clogged up, because

31
00:02:10,610 --> 00:02:14,220
of the tree saturation. And therefore, I'm not going

32
00:02:14,220 --> 00:02:17,430
to even try to place the key value pair

33
00:02:17,430 --> 00:02:20,340
at the destination, at the desire destination. And not

34
00:02:20,340 --> 00:02:23,520
even at this guy because he's also loaded and

35
00:02:23,520 --> 00:02:26,330
or full for the same key. And so I'm

36
00:02:26,330 --> 00:02:29,540
going to retract my step and choose this node

37
00:02:29,540 --> 00:02:32,120
as the node to place the key value pair.

38
00:02:32,120 --> 00:02:34,750
So in other words, when I do a put operation,

39
00:02:34,750 --> 00:02:38,170
there are two phases to it. The first phase is

40
00:02:38,170 --> 00:02:41,000
the forward phase. In the forward phase, what we are

41
00:02:41,000 --> 00:02:44,410
doing is, we are going to the guy that is half

42
00:02:44,410 --> 00:02:48,540
the distance to the desired destination asking him are you

43
00:02:48,540 --> 00:02:50,790
full or loaded. He says, no, I am not. Then

44
00:02:50,790 --> 00:02:54,190
you go to the next guy who is even closer

45
00:02:54,190 --> 00:02:58,070
to the desired destination. He says, he's not full or loaded.

46
00:02:58,070 --> 00:02:59,270
Then you go to the next guy, who

47
00:02:59,270 --> 00:03:03,410
is even closer. Using that, key based routing algorithm

48
00:03:03,410 --> 00:03:05,690
that I described to you earlier. So keep

49
00:03:05,690 --> 00:03:08,640
going till you hit a node, that is either

50
00:03:08,640 --> 00:03:11,780
loaded or full. At that point you know,

51
00:03:11,780 --> 00:03:14,010
you don't want to go any further towards the desired

52
00:03:14,010 --> 00:03:19,220
destination because all of these guys are either loaded

53
00:03:19,220 --> 00:03:23,760
or full, dealing with this particular key. And therefore,

54
00:03:23,760 --> 00:03:26,360
the second phase of the algorithm that I'm

55
00:03:26,360 --> 00:03:30,000
going to use, is retract my steps and go

56
00:03:30,000 --> 00:03:34,121
back, and ensure that, that this guy is still

57
00:03:34,121 --> 00:03:38,420
willing to host my key value pair. Why would

58
00:03:38,420 --> 00:03:40,580
he change his mind? Well, between the time

59
00:03:40,580 --> 00:03:42,650
that that I am making this forward motion it

60
00:03:42,650 --> 00:03:45,430
is possible that this guy got either full or

61
00:03:45,430 --> 00:03:49,150
loaded. So I'll recheck the condition. It says still

62
00:03:49,150 --> 00:03:51,445
I'm good to host your key value pair,

63
00:03:51,445 --> 00:03:56,010
I'll choose this node for the Put operation.

64
00:03:56,010 --> 00:04:02,050
That's how the Coral Put operation works. So you can see that we are not storing

65
00:04:02,050 --> 00:04:05,140
the key in the desired destination, which should

66
00:04:05,140 --> 00:04:07,490
have been the way a greedy algorithm would

67
00:04:07,490 --> 00:04:10,770
have worked. But in the sloppy algorithm of

68
00:04:10,770 --> 00:04:14,810
Coral, we choose an appropriate node that is neither

69
00:04:14,810 --> 00:04:19,785
full nor loaded, so that it can entertain requests for

70
00:04:19,785 --> 00:04:24,820
retrieving this particular key value pair. So we've avoided the

71
00:04:24,820 --> 00:04:29,840
meta server overload by doing this key-based

72
00:04:29,840 --> 00:04:34,990
routing in the forward path during the put operation. So the get operation

73
00:04:34,990 --> 00:04:40,040
is going to do exactly similarly. That is given a key that I'm looking

74
00:04:40,040 --> 00:04:44,890
for, I'm not going to go directly to the destination that might be hosting it,

75
00:04:46,110 --> 00:04:52,436
as would happen in the greedy approach. But instead, what I would do is go to a

76
00:04:52,436 --> 00:04:58,550
node that it is half the distance to the key I'm looking for. And when I do

77
00:04:58,550 --> 00:05:05,160
that, my hope is I'll find the key somewhere along the way. Because some guy may

78
00:05:05,160 --> 00:05:10,260
be serving as the meta data server for that particular key. If

79
00:05:10,260 --> 00:05:15,290
not, I will go, to the, destination. If nobody has retrieved

80
00:05:15,290 --> 00:05:20,286
that key before, it will be available at the desired destination. I'll get it

81
00:05:20,286 --> 00:05:25,488
from there. But the hope is that, if, a content is popular

82
00:05:25,488 --> 00:05:30,798
enough, then, multiple people, multiple proxies

83
00:05:30,798 --> 00:05:37,516
may have gotten the key value pair. And therefore, and they may have gotten the

84
00:05:37,516 --> 00:05:43,211
key value pair, and in turn when they have gotten the content as well, they will

85
00:05:43,211 --> 00:05:49,010
have put their own node IDs as a potential node for the content. And so, our

86
00:05:49,010 --> 00:05:52,570
metadata server, when we are looking for a

87
00:05:52,570 --> 00:05:56,350
particular key may not necessarily have to be

88
00:05:56,350 --> 00:05:59,740
the destination which exactly matches that key.
