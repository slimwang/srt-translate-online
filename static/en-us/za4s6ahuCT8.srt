1
00:00:00,000 --> 00:00:01,500
In the question hash string,

2
00:00:01,500 --> 00:00:04,000
we have to determine which of the following statements are true.

3
00:00:04,000 --> 00:00:06,000
Let's go through the statements 1 by 1.

4
00:00:06,000 --> 00:00:11,000
The first statement says the number of string comparisons done to look up a keyword

5
00:00:11,000 --> 00:00:15,000
that is not a key in the hash table may be less than the number needed to look up a keyword

6
00:00:15,000 --> 00:00:17,000
that is a key in the hash table.

7
00:00:17,000 --> 00:00:19,000
As this turns out, this is actually a true statement.

8
00:00:19,000 --> 00:00:21,000
In order to show it, we need an example,

9
00:00:21,000 --> 00:00:26,000
so let me give you an example dictionary with 3 buckets and 3 keywords in here.

10
00:00:26,000 --> 00:00:29,000
I'm not showing the values because they don't really matter for this example.

11
00:00:29,000 --> 00:00:31,000
It could be the case that if we search for "Batman"

12
00:00:31,000 --> 00:00:33,000
our hash function takes us to bucket 0

13
00:00:33,000 --> 00:00:37,000
and then we have to compare between "Andy," "is," and finally "Batman."

14
00:00:37,000 --> 00:00:39,000
So that would be 3 string comparisons.

15
00:00:39,000 --> 00:00:44,000
Let's say we search for "Irvin" and that brings us to bucket 2.

16
00:00:44,000 --> 00:00:47,000
There's nothing in bucket 2, so there's no comparisons to be made.

17
00:00:47,000 --> 00:00:50,000
This is an example where it actually takes more comparisons

18
00:00:50,000 --> 00:00:55,000
to look up something in the hash table than it does to look up something not in the hash table.

19
00:00:55,000 --> 00:00:59,000
Statement 2 says we should expect the time to look up most keywords in the hash table

20
00:00:59,000 --> 00:01:02,000
will decrease as we increase the number of buckets.

21
00:01:02,000 --> 00:01:04,000
And with a good hash function this is true.

22
00:01:04,000 --> 00:01:07,000
Let's say we have a hash table with only 2 buckets.

23
00:01:07,000 --> 00:01:12,000
If we have a good hash function, the number of keywords in each bucket is the same.

24
00:01:12,000 --> 00:01:15,000
And so the average number of comparisons is going to be half the size of a bucket

25
00:01:15,000 --> 00:01:18,000
in order to look up a keyword in the hash table.

26
00:01:18,000 --> 00:01:23,000
If we double the number of buckets, the average lookup time is decreasing significantly.

27
00:01:23,000 --> 00:01:26,000
And with a good hash function the time is going to decrease even more.

28
00:01:26,000 --> 00:01:29,000
Statement 3 says it is always better to have more buckets in a hash table.

29
00:01:29,000 --> 00:01:31,000
This is a pretty strong statement,

30
00:01:31,000 --> 00:01:34,000
as indicated by the use of the word always,

31
00:01:34,000 --> 00:01:36,500
and it's really because of that word that the statement is false.

32
00:01:36,500 --> 00:01:38,000
There's really 2 good reasons.

33
00:01:38,000 --> 00:01:41,000
The first reason is because changing the number of buckets,

34
00:01:41,000 --> 00:01:45,000
be it more or less, changes where keywords hash to.

35
00:01:45,000 --> 00:01:48,000
It could be the case that with 2 buckets I have a good distribution.

36
00:01:48,000 --> 00:01:51,000
But if I add a third bucket, the hash function is such

37
00:01:51,000 --> 00:01:53,000
that everything lands in that new bucket.

38
00:01:53,000 --> 00:01:57,000
We choose hash functions carefully so that this is less likely,

39
00:01:57,000 --> 00:02:00,000
but depending on the keywords you're using, this is still possible.

40
00:02:00,000 --> 00:02:02,000
And the second reason is memory.

41
00:02:02,000 --> 00:02:04,000
I could have an arbitrarily long hash table,

42
00:02:04,000 --> 00:02:08,000
but they can use a lot of space, especially if there are a few keywords that go into it.

43
00:02:08,000 --> 00:02:13,000
Real-world implementations of hash tables try to shoot for a ratio

44
00:02:13,000 --> 00:02:16,000
between the number of buckets they have and the number of keywords,

45
00:02:16,000 --> 00:02:19,000
increasing the number of buckets accordingly

46
00:02:19,000 --> 00:02:22,000
as the number of keywords in the hash table decrease and increase.

47
00:02:22,000 --> 00:02:25,000
Statement 4 says the time to look up a keyword in the hash table

48
00:02:25,000 --> 00:02:30,000
is always less than the time it would take in a linear time list (as used in Unit 4).

49
00:02:30,000 --> 00:02:33,000
So the question is, is the lookup time always less

50
00:02:33,000 --> 00:02:37,000
than the lists that we've been using previously?

51
00:02:37,000 --> 00:02:40,000
And as you might suspect, this statement is false.

52
00:02:40,000 --> 00:02:43,000
We're going to show that by giving an example hash table.

53
00:02:43,000 --> 00:02:47,000
If I have a hash table where 3 keywords all go in bucket 1,

54
00:02:47,000 --> 00:02:52,000
if I want to look up the keyword "Batman," I'm going to go to bucket 1

55
00:02:52,000 --> 00:02:56,000
and iterate through each item in this bucket until I find "Batman."

56
00:02:56,000 --> 00:03:01,000
That's essentially the same as a normal list where we just start from the beginning

57
00:03:01,000 --> 00:03:03,000
without doing any kind of hash function

58
00:03:03,000 --> 00:03:06,000
and just go through each item 1 by 1 searching for "Batman."
