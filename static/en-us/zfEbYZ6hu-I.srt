1
00:00:00,302 --> 00:00:02,264
So to implement the full particle filter,

2
00:00:02,264 --> 00:00:05,487
the only thing is really missing is the measurement_prob function.

3
00:00:05,487 --> 00:00:08,865
And that's a little bit more involved because I have to

4
00:00:08,865 --> 00:00:14,460
really compare what the exact measurement would be for any ove, overt particle.

5
00:00:14,460 --> 00:00:18,617
And what I sensed and compute the probability correspondence between

6
00:00:18,617 --> 00:00:22,020
the correct measurements, and what I sensed over here.

7
00:00:22,020 --> 00:00:26,420
To do this, I calculate predicted measurements using the sense function.

8
00:00:26,420 --> 00:00:28,150
Here comes a little flag that I defined.

9
00:00:28,150 --> 00:00:32,290
If I set it to 0, than the sense function acts noise free.

10
00:00:32,290 --> 00:00:35,670
Which is what I want, it could be the measurement model.

11
00:00:35,670 --> 00:00:38,370
But even we you left this out, you're going to get a fine answer on my opinion.

12
00:00:38,370 --> 00:00:40,330
But that makes it a little bit more accurate.

13
00:00:40,330 --> 00:00:44,300
So that allows me to compute the exact bearings of the landmarks for

14
00:00:44,300 --> 00:00:44,970
my particle.

15
00:00:44,970 --> 00:00:48,760
And then I can compare these correct bearings called predicted measurements

16
00:00:48,760 --> 00:00:50,290
with the ones that I received.

17
00:00:50,290 --> 00:00:53,540
Now do this, down here, in the compute errors routine.

18
00:00:54,600 --> 00:00:58,820
Where I go through each measurement and in two steps,

19
00:00:58,820 --> 00:01:00,460
I calculated the error in bearing.

20
00:01:00,460 --> 00:01:05,209
First, it's the absolute difference between my measurement that I observed,

21
00:01:05,209 --> 00:01:08,560
minus the predicted measurement, and there's an i at the end over here.

22
00:01:08,560 --> 00:01:09,940
Let's see if you can see this.

23
00:01:09,940 --> 00:01:11,190
Right there.

24
00:01:11,190 --> 00:01:15,780
And this difference might fall outside minus pi plus pi.

25
00:01:15,780 --> 00:01:18,640
So this line over here just brings it back

26
00:01:18,640 --> 00:01:22,110
to the smallest possible value in this cyclic space of 0 to 2 pi.

27
00:01:22,110 --> 00:01:26,690
So adding pi, adding more load 2 times pi and I subtract pi again.

28
00:01:26,690 --> 00:01:29,940
So this gives me a value between minus pi and plus pi.

29
00:01:29,940 --> 00:01:31,980
I then pluck this error_bearing into a Gaussian.

30
00:01:31,980 --> 00:01:35,360
And here is my Gaussian where I squared it,

31
00:01:35,360 --> 00:01:39,900
I divide it by my bearing-noise squared, complete the exponential, and

32
00:01:39,900 --> 00:01:43,200
use my normalizer to strictly speaking of, don't really need for

33
00:01:43,200 --> 00:01:47,960
the implementation, I can safely omit it because weights are self-normalized.

34
00:01:47,960 --> 00:01:50,550
But I left it in, so it's actually really a Gaussian.

35
00:01:50,550 --> 00:01:54,010
And I take this Gaussian value and multiply it up into my error function.

36
00:01:54,010 --> 00:01:58,270
So for each of the measurements, I multiply in one Gaussian.

37
00:01:58,270 --> 00:02:01,550
And the final Gaussian is my importance whether I return in this

38
00:02:01,550 --> 00:02:02,150
function over here.

39
00:02:02,150 --> 00:02:03,820
So this is not easy to implement.

40
00:02:03,820 --> 00:02:05,150
I hope you got it right.

41
00:02:05,150 --> 00:02:07,530
Scrolling further down in my code,

42
00:02:07,530 --> 00:02:09,340
I now implement the particle field as follows.

43
00:02:09,340 --> 00:02:11,320
It uses a thousand particles.

44
00:02:11,320 --> 00:02:13,600
And this is exactly the same routine we had before,

45
00:02:13,600 --> 00:02:15,960
where we generate our initial particles.

46
00:02:15,960 --> 00:02:17,200
Here, I set the noise for

47
00:02:17,200 --> 00:02:20,730
these particles, to be bearing_noise, steering_noise and distance_noise.

48
00:02:20,730 --> 00:02:24,900
I don't comment out the measurement generation step, I just take the input.

49
00:02:24,900 --> 00:02:28,090
And then as I go further down, I just run my particle theta.

50
00:02:28,090 --> 00:02:30,390
This is the exact same code you're familiar with.

51
00:02:30,390 --> 00:02:31,590
There's a motion update,

52
00:02:31,590 --> 00:02:35,970
there's a measurement update, and there's a resampling step over here.

53
00:02:35,970 --> 00:02:37,490
All those are the same as before.

54
00:02:38,540 --> 00:02:42,480
And at the very end I just print the result of get_position.

55
00:02:42,480 --> 00:02:46,720
So if I do this for my example, here is the position I get.

56
00:02:46,720 --> 00:02:49,660
And I guess for, I forgot to uncommon the Robot coordinate over here.

57
00:02:49,660 --> 00:02:54,064
But if you look at the values over here, 7.0 is about the same as 8,

58
00:02:54,064 --> 00:02:58,790
49 is about the same as 48, and 4.31 is about the same as 4.35.

59
00:02:58,790 --> 00:03:00,609
So this particle filter,

60
00:03:00,609 --> 00:03:04,836
clearly does a pretty job in estimating the forward position
