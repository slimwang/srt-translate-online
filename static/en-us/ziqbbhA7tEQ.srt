1
00:00:00,440 --> 00:00:04,980
An operating system has to feel external events. For example, external

2
00:00:04,980 --> 00:00:09,630
interrupts that may come in when a process is executing. Or, the process

3
00:00:09,630 --> 00:00:15,530
itself may incur some exceptions such as a page

4
00:00:15,530 --> 00:00:20,260
fault. Or it may make system calls. All of these are events that needs to be

5
00:00:20,260 --> 00:00:25,600
fielded by the operating system and SPIN has

6
00:00:25,600 --> 00:00:30,880
to support such external events. And SPIN supports such external events

7
00:00:30,880 --> 00:00:36,270
using an event based communication model. Services can register

8
00:00:36,270 --> 00:00:41,550
what are called event handlers with the SPIN event dispatcher, and SPIN

9
00:00:41,550 --> 00:00:46,350
supports several types of mapping. It support a one

10
00:00:46,350 --> 00:00:51,590
to one mapping between an event and a handler.

11
00:00:51,590 --> 00:00:58,540
It also support one to many mapping between an event and the handlers. And it

12
00:00:58,540 --> 00:01:02,420
also supports many to one mapping, many events

13
00:01:02,420 --> 00:01:05,780
being mapped to the same handler. And let's

14
00:01:05,780 --> 00:01:08,990
look at concrete examples to illustrate the power

15
00:01:08,990 --> 00:01:11,530
of this mapping and how it might help

16
00:01:11,530 --> 00:01:14,440
in building system services. And what this picture

17
00:01:14,440 --> 00:01:17,750
is showing you is a typical protocol stack.

18
00:01:17,750 --> 00:01:20,800
And you may have several different interfaces available on

19
00:01:20,800 --> 00:01:25,160
your machine. And therefore, a network packet may arrive

20
00:01:25,160 --> 00:01:27,800
through one of several interfaces. Let's say you have

21
00:01:27,800 --> 00:01:31,350
an Ethernet interface and you have an ATM interface.

22
00:01:31,350 --> 00:01:34,290
A network packet may arrive on the Ethernet port

23
00:01:34,290 --> 00:01:37,110
or an ATM port. Those are events, and both

24
00:01:37,110 --> 00:01:40,530
of those may be IP packets, in which case

25
00:01:40,530 --> 00:01:42,830
there is an IP handler that needs to see

26
00:01:42,830 --> 00:01:48,630
the events. And so, here is an example of many events mapping to the same

27
00:01:48,630 --> 00:01:51,980
handler. Ethernet packet arrival is an event, ATM

28
00:01:51,980 --> 00:01:54,920
packet arrival is an event, different events but

29
00:01:54,920 --> 00:01:57,230
they map the same handler, which is the

30
00:01:57,230 --> 00:02:00,980
IP handler. That's an example of many-to-one mapping.

31
00:02:00,980 --> 00:02:04,420
The processing of the packet by this IP

32
00:02:04,420 --> 00:02:07,920
handler results in an IP packet arrival event.

33
00:02:07,920 --> 00:02:10,240
And there will be several clients of the

34
00:02:10,240 --> 00:02:13,080
IP layer of the protocol stack. There will be

35
00:02:13,080 --> 00:02:15,810
UDP transport, there will be TCP transport, there will

36
00:02:15,810 --> 00:02:19,090
be an ICMP layer. And they are all sitting

37
00:02:19,090 --> 00:02:22,450
on top of this IP network layer. So when

38
00:02:22,450 --> 00:02:26,510
an IP packet arrival event is figured by this

39
00:02:26,510 --> 00:02:29,750
handler, there are multiple clients for that, and this

40
00:02:29,750 --> 00:02:32,640
is an example of a one to many mapping,

41
00:02:32,640 --> 00:02:36,290
one event, to multiple handlers, that need

42
00:02:36,290 --> 00:02:40,020
to get triggered. And the SPIN dispatcher allows

43
00:02:40,020 --> 00:02:43,320
any number of handlers to be registered as

44
00:02:43,320 --> 00:02:46,200
handling a particular event type. And when that

45
00:02:46,200 --> 00:02:48,700
even type is reached, then all the

46
00:02:48,700 --> 00:02:51,740
handlers associated with that event type will get

47
00:02:51,740 --> 00:02:54,980
scheduled by the SPIN dispatcher. The order in

48
00:02:54,980 --> 00:02:57,995
which they get scheduled is not something that

49
00:02:57,995 --> 00:03:01,190
the designer can count on, because SPIN has

50
00:03:01,190 --> 00:03:04,580
freedom in the ordering which these event handlers

51
00:03:04,580 --> 00:03:08,530
may get scheduled when a particular event arise.

52
00:03:08,530 --> 00:03:11,300
But all the handlers that are associated with an

53
00:03:11,300 --> 00:03:13,620
event will get triggered when that event is

54
00:03:13,620 --> 00:03:18,090
released. That's an example of one to many mapping.

55
00:03:18,090 --> 00:03:23,700
And finally, here is an example of a one to one mapping. If it's an ICMP packet,

56
00:03:23,700 --> 00:03:26,870
the ICMP handler processes the IP packet, and

57
00:03:26,870 --> 00:03:29,380
if it is an ICMP packet, then it raises

58
00:03:29,380 --> 00:03:32,120
an event than an ICMP packet has arrived,

59
00:03:32,120 --> 00:03:34,290
and maybe there is only one client for that

60
00:03:34,290 --> 00:03:38,420
particular event, and that may be the ping program, so that's one, two on

61
00:03:38,420 --> 00:03:43,630
mapping. Even handlers may also be specified with guards of

62
00:03:43,630 --> 00:03:49,640
finer grain handler execution. For example, this handler could specify

63
00:03:49,640 --> 00:03:55,190
that only when IP packets arrive it should be executed. So that's a guard that

64
00:03:55,190 --> 00:04:00,410
the IP packet handler could specify so that even though different

65
00:04:00,410 --> 00:04:04,830
kinds of packets may arrive on these interfaces, this handler will only get

66
00:04:04,830 --> 00:04:07,555
triggered when the packet that arrived

67
00:04:07,555 --> 00:04:09,640
on the different interfaces than IP packet.
