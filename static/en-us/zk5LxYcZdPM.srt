1
00:00:00,280 --> 00:00:03,940
Okay. Now that you've seen how create a pull request, let's take a look at what

2
00:00:03,940 --> 00:00:07,890
happens when someone else makes changes that conflict with your pull request.

3
00:00:07,890 --> 00:00:09,980
Sarah has said that my pull request looks good,

4
00:00:09,980 --> 00:00:13,050
but she has also made a pull request.

5
00:00:13,050 --> 00:00:15,810
I can see it here in the list of pull requests.

6
00:00:15,810 --> 00:00:18,910
It looks like she increased the amount of oil to put in the cake so

7
00:00:18,910 --> 00:00:20,790
that it would be more moist.

8
00:00:20,790 --> 00:00:24,700
Since our changes affect the same line, git will mark them as a merge conflict,

9
00:00:24,700 --> 00:00:27,410
so one of us will have to resolve the conflict.

10
00:00:27,410 --> 00:00:28,790
I'll go back to this screen and

11
00:00:28,790 --> 00:00:33,260
merge Sarah's changes first, and then I'll need to resolve the merge conflict.

12
00:00:33,260 --> 00:00:34,800
Yes, confirm.

13
00:00:34,800 --> 00:00:37,410
And since Sarah only created the more oil branch in order to

14
00:00:37,410 --> 00:00:41,420
make this pull request into master, it's safe to delete the branch now.

15
00:00:41,420 --> 00:00:43,260
Now when I go back to my pull request,

16
00:00:43,260 --> 00:00:46,100
I see that it can't be automatically merged anymore.

17
00:00:46,100 --> 00:00:49,110
This is because performing a merge between the master branch and

18
00:00:49,110 --> 00:00:51,750
my branch would now cause merge conflicts.

19
00:00:51,750 --> 00:00:55,140
Rather than having you resolve the merge conflicts from the browser GitHub

20
00:00:55,140 --> 00:00:58,030
requires you to merge the changes on your own computer and

21
00:00:58,030 --> 00:01:00,780
send update the pull request with the merged version.

22
00:01:00,780 --> 00:01:02,900
Let's go to Sarah to talk about how you would do that.

23
00:01:04,150 --> 00:01:07,230
>> Here's what the recipes repository looked like on GitHub

24
00:01:07,230 --> 00:01:10,110
before Caroline merged in my change.

25
00:01:10,110 --> 00:01:12,750
Notice that I've left some of the earlier changes out this time because I'm

26
00:01:12,750 --> 00:01:14,290
a little bit pressed for space.

27
00:01:14,290 --> 00:01:17,630
Here's the branch that I created to add more oil to the recipe.

28
00:01:17,630 --> 00:01:21,680
And here's Caroline's branch with the different kind of oil.

29
00:01:21,680 --> 00:01:25,830
With the misspelling, and master at this point is still unchanged.

30
00:01:25,830 --> 00:01:27,800
And here's what the local version looks like.

31
00:01:27,800 --> 00:01:28,990
My changes aren't there because she

32
00:01:28,990 --> 00:01:30,760
hasn't pulled since the last time she pushed.

33
00:01:30,760 --> 00:01:35,520
What do you think happened in this diagram when Caroline clicked the button

34
00:01:35,520 --> 00:01:37,750
to merge my branch into master?

35
00:01:38,850 --> 00:01:42,070
You might be remembering when we talked about fast forward merges.

36
00:01:42,070 --> 00:01:44,380
And how since master is an ancestor of more oil.

37
00:01:45,640 --> 00:01:49,200
Master might just get updated to point to the tip of more oil branch.

38
00:01:49,200 --> 00:01:51,300
That would be a great guess.

39
00:01:51,300 --> 00:01:53,300
That's actually what I would of expected, but

40
00:01:53,300 --> 00:01:56,220
it turns out that even if you could of had a fast forward merge,

41
00:01:56,220 --> 00:01:59,950
merging with the button on GitHub will always make a commit anyway even if

42
00:01:59,950 --> 00:02:03,560
no extra information is given by making that merge commit.

43
00:02:03,560 --> 00:02:06,260
After clicking the button to make this merge commit.

44
00:02:06,260 --> 00:02:08,440
Caroline also deleted this branch.

45
00:02:08,440 --> 00:02:12,060
GitHub makes this very easy to do after a merge and it's pretty common to

46
00:02:12,060 --> 00:02:14,810
want to actually get rid of this branch cause usually it's named for

47
00:02:14,810 --> 00:02:17,730
the specific purpose that, that branch was serving and

48
00:02:17,730 --> 00:02:20,600
once you merge it in it's pretty much at the end of it's life.

49
00:02:20,600 --> 00:02:23,390
So we'll go ahead and remove it from the diagram as well.

50
00:02:23,390 --> 00:02:25,740
So this is what GitHub looks like at this point.

51
00:02:25,740 --> 00:02:30,870
Now if Caroline wants to update her pull request to include my changes.

52
00:02:30,870 --> 00:02:33,160
If merging these two branches wouldn't cause a conflict,

53
00:02:33,160 --> 00:02:36,820
I could actually just pull in her request now.

54
00:02:36,820 --> 00:02:38,780
But since we changed the same lines,

55
00:02:38,780 --> 00:02:42,470
she's going to have to pull these changes over into her local version.

56
00:02:42,470 --> 00:02:43,860
So she'll need to pull master.

57
00:02:44,920 --> 00:02:47,840
This will update her local version with all the commits on

58
00:02:47,840 --> 00:02:50,110
master that aren't already on her version.

59
00:02:50,110 --> 00:02:52,350
So this one and this one.

60
00:02:52,350 --> 00:02:54,620
And it'll also update origin/master.

61
00:02:54,620 --> 00:02:57,150
There wasn't an obvious place to put this, since there's so

62
00:02:57,150 --> 00:02:59,390
many things attached to this commit.

63
00:02:59,390 --> 00:03:00,250
And I'm a little low on space.

64
00:03:00,250 --> 00:03:05,490
So, here's an arrow to show you that this is attached to this command.

65
00:03:05,490 --> 00:03:09,530
Remember, Caroline's eventual goal is to get her change into the master branch

66
00:03:09,530 --> 00:03:11,400
up on the GitHub repo.

67
00:03:11,400 --> 00:03:13,910
So, you might be tempted to think that she should just merge her branch

68
00:03:14,950 --> 00:03:16,850
into master and push it up.

69
00:03:16,850 --> 00:03:19,700
This is basically what happened the last time we had a merge conflict.

70
00:03:19,700 --> 00:03:22,590
But remember, this time we're using pull requests to communicate our

71
00:03:22,590 --> 00:03:23,900
changes to one another.

72
00:03:23,900 --> 00:03:26,700
So if Caroline just merged her branch into master and

73
00:03:26,700 --> 00:03:30,240
pushed it up, I wouldn't have a chance to check out her updates and

74
00:03:30,240 --> 00:03:33,000
make sure her changes still looked good before she updated master.

75
00:03:34,070 --> 00:03:37,960
In this collaborative environment it's often only acceptable to make changes to

76
00:03:37,960 --> 00:03:40,080
master through pull request,

77
00:03:40,080 --> 00:03:43,530
since otherwise things can change out from under you without notification.

78
00:03:43,530 --> 00:03:46,870
So Caroline will need to make the fix to her branch.

79
00:03:46,870 --> 00:03:52,570
Fix the typo for canola, and then merge in master into her different oil branch.

80
00:03:52,570 --> 00:03:56,630
And then push her branch up to GitHub which will update the pull request so

81
00:03:56,630 --> 00:03:58,870
that I can look at that before merging it back into master.
