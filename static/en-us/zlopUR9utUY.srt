1
00:00:00,140 --> 00:00:03,010
Before getting started on this function,
I'm going to think about

2
00:00:03,010 --> 00:00:05,950
how I would calculate the overall
completion rate for a single country.

3
00:00:07,070 --> 00:00:10,900
So let's say i have these two values for
a female and male completion rate.

4
00:00:10,900 --> 00:00:14,580
To get the overall completion rate,
I would add up these two values and

5
00:00:14,580 --> 00:00:16,230
divide by two.

6
00:00:16,230 --> 00:00:18,300
Sure enough, that looks like it worked.

7
00:00:18,300 --> 00:00:20,530
Now because of Numpy's
vectorized operations,

8
00:00:20,530 --> 00:00:24,390
I can actually use this exact
same line of code for arrays.

9
00:00:24,390 --> 00:00:25,280
To demonstrate that,

10
00:00:25,280 --> 00:00:28,720
I'll show the results on these shorter
arrays with data for only 20 countries.

11
00:00:29,860 --> 00:00:33,210
First, if I add the two arrays together,
I get an array with

12
00:00:33,210 --> 00:00:36,660
the sum of the female and
male completion rate for each country.

13
00:00:36,660 --> 00:00:39,560
So each element in
the resulting array is the sum

14
00:00:39,560 --> 00:00:42,209
of the corresponding elements
from the two previous arrays.

15
00:00:43,210 --> 00:00:45,060
I'll name this array total_array.

16
00:00:45,060 --> 00:00:49,540
Then if I divide the total array by two,
I get an array where each element

17
00:00:49,540 --> 00:00:52,150
is half of the corresponding
element from total array.

18
00:00:53,170 --> 00:00:56,980
This is the result I wanted, so
I'll scroll up and fill in my function.

19
00:00:56,980 --> 00:01:00,586
So the code for this function
is return (female_completion +

20
00:01:00,586 --> 00:01:02,372
male_completion) / 2.

21
00:01:02,372 --> 00:01:05,510
And just like when doing
arithmetic on single numbers,

22
00:01:05,510 --> 00:01:06,950
adding parentheses is important.
