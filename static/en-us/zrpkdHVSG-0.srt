1
00:00:00,160 --> 00:00:02,009
Let's go back to adding things to our chart.

2
00:00:02,009 --> 00:00:04,059
Remember from the intro video that this course is going to

3
00:00:04,059 --> 00:00:06,330
involve a version control system called Git?

4
00:00:06,330 --> 00:00:08,200
You may be wondering how Git got its name.

5
00:00:08,200 --> 00:00:11,540
It was created in 2005 by Linus Torvalds.

6
00:00:11,540 --> 00:00:15,288
Git is British slang for something roughly equivalent to unpleasant person.

7
00:00:15,288 --> 00:00:17,720
Torvalds once said, I'm an egotistical bastard and

8
00:00:17,720 --> 00:00:19,310
I name all my projects after myself.

9
00:00:19,310 --> 00:00:21,070
First Linux, now Git.

10
00:00:21,070 --> 00:00:23,090
Git was designed with code in mind.

11
00:00:23,090 --> 00:00:25,088
It's not the only system built with that goal though.

12
00:00:25,088 --> 00:00:27,870
One early widely-adopted version control system for

13
00:00:27,870 --> 00:00:31,180
code is called CVS, Concurrent Version Systems.

14
00:00:31,180 --> 00:00:35,727
Another system, SVN, also known as Subversion, is fairly similar, but

15
00:00:35,727 --> 00:00:38,060
improved on CVS to some extent.

16
00:00:38,060 --> 00:00:41,640
Another system you may have heard of is Mercurial, abbreviated hg,

17
00:00:41,640 --> 00:00:44,120
the elemental symbol for mercury.

18
00:00:44,120 --> 00:00:48,300
Mercurial has a lot in common with Git, and CVS and SVN are pretty similar.

19
00:00:48,300 --> 00:00:52,820
So to avoid cluttering up our chart, I'll just add SVN and leave the others off.

20
00:00:52,820 --> 00:00:55,520
Let's go ahead and fill in the chart for our new entries.

21
00:00:55,520 --> 00:00:56,120
All right, so

22
00:00:56,120 --> 00:01:00,220
which of these systems have the user manually saving versus autosaving?

23
00:01:00,220 --> 00:01:03,300
Well, clearly manual saving requires you to manually save.

24
00:01:03,300 --> 00:01:06,300
Wikipedia also requires this, so does SVN.

25
00:01:06,300 --> 00:01:09,470
Dropbox and Google Docs, on the other hand, save versions for you whether or

26
00:01:09,470 --> 00:01:11,090
not you manually save.

27
00:01:11,090 --> 00:01:12,210
So what does Git do?

28
00:01:12,210 --> 00:01:13,580
Git takes the manual approach,

29
00:01:13,580 --> 00:01:15,790
allowing the user to choose when to create checkpoints.

30
00:01:15,790 --> 00:01:18,810
While it may seem like having changes saved automatically would be convenient or

31
00:01:18,810 --> 00:01:22,640
nice, Git's system makes it much more likely that each individual version

32
00:01:22,640 --> 00:01:24,310
represent a logical change.

33
00:01:24,310 --> 00:01:25,940
We'll expand on why this is useful later.

34
00:01:25,940 --> 00:01:29,770
But intuitively, being able to view old versions is much more useful if each

35
00:01:29,770 --> 00:01:31,130
checkpoint is meaningful.

36
00:01:31,130 --> 00:01:34,770
In Git terminology, these user-created checkpoints are called commits.

37
00:01:34,770 --> 00:01:36,740
Commits are the basic building blocks of Git,

38
00:01:36,740 --> 00:01:40,140
each one representing a version of the content at one point in time.

39
00:01:40,140 --> 00:01:43,870
Git requires the user to supply commit message each time a commit is created.

40
00:01:43,870 --> 00:01:46,810
This makes looking through old versions much more useful and pleasant than

41
00:01:46,810 --> 00:01:50,700
the Google Docs model, assuming that the user supplied a useful commit message.

42
00:01:50,700 --> 00:01:51,550
You'll actually get a chance to

43
00:01:51,550 --> 00:01:53,820
see what this looks like in Git soon with Caroline.
