1
00:00:00,300 --> 00:00:04,900
So the first possibility, or the first choice, is reusing a local

2
00:00:04,900 --> 00:00:10,250
implementation. So let's say that the developer has access to a local

3
00:00:10,250 --> 00:00:15,310
implementation of a class called account. And she then

4
00:00:15,310 --> 00:00:20,510
takes that class account and derives and extends it to, to

5
00:00:20,510 --> 00:00:25,890
create public methods in the API bank account, and creates

6
00:00:25,890 --> 00:00:28,700
a bank account implementation. So she started

7
00:00:28,700 --> 00:00:32,950
with a local implementation of a class account

8
00:00:32,950 --> 00:00:36,510
and extended it to implement the bank account.

9
00:00:36,510 --> 00:00:39,420
Now this bank account service that has been

10
00:00:39,420 --> 00:00:43,150
created, she has to make that visible outside,

11
00:00:43,150 --> 00:00:45,030
in the network, so that any client can

12
00:00:45,030 --> 00:00:48,210
access it. So this is where she uses

13
00:00:48,210 --> 00:00:50,920
the built-in class available in the distributed object

14
00:00:50,920 --> 00:00:54,400
model of Java called the remote Interface.

15
00:00:54,400 --> 00:00:57,430
And what she does is, using that built

16
00:00:57,430 --> 00:01:01,201
in remote class that's available in the distributed

17
00:01:01,201 --> 00:01:03,869
object model of Java, she makes the methods

18
00:01:03,869 --> 00:01:09,960
in the bank account class that she created visible on the network. As a result

19
00:01:09,960 --> 00:01:13,670
of this, so now she's created this interface

20
00:01:13,670 --> 00:01:16,240
derived from the remote interface she has created,

21
00:01:16,240 --> 00:01:21,990
this interface for her bank account object. And so this interface becomes now

22
00:01:21,990 --> 00:01:28,390
publicly available for anyone to access. So clients on the network can have

23
00:01:28,390 --> 00:01:31,800
access to this interface bank account.

24
00:01:31,800 --> 00:01:35,070
Now she instantiates this bank account implementation.

25
00:01:35,070 --> 00:01:37,040
. What happens when the bank

26
00:01:37,040 --> 00:01:41,760
account implementation is actually instantiated? The location

27
00:01:41,760 --> 00:01:45,252
of the bank account implementation object, the instantiation that

28
00:01:45,252 --> 00:01:47,970
she has done, is not visible to the client.

29
00:01:47,970 --> 00:01:50,050
All that is visible to the client is the

30
00:01:50,050 --> 00:01:53,130
interface. The actual location of the object is not something

31
00:01:53,130 --> 00:01:55,505
that is visible to the client, and therefore the

32
00:01:55,505 --> 00:02:00,110
implementer has to do the heavy lifting of finding a

33
00:02:00,110 --> 00:02:04,580
way to make the location of the service visible

34
00:02:04,580 --> 00:02:07,110
to the clients on the network. So in the first

35
00:02:07,110 --> 00:02:11,070
choice, all that we used was the built-in class

36
00:02:11,070 --> 00:02:13,340
and the distributed object model of Java, which is

37
00:02:13,340 --> 00:02:16,600
a remote interface to publish the interface for a

38
00:02:16,600 --> 00:02:19,230
facility that we created. In this case, the bank

39
00:02:19,230 --> 00:02:21,790
account and the methods in it. And once we

40
00:02:21,790 --> 00:02:24,950
publish it, that interface is available. Because we derived

41
00:02:24,950 --> 00:02:28,010
it from the remote interface, the int, the specific

42
00:02:28,010 --> 00:02:32,330
interface, bank account interface, is available for any client

43
00:02:32,330 --> 00:02:37,110
on the network. However, when we instantiate the object, the location of the

44
00:02:37,110 --> 00:02:41,630
object where that service is available is not something that is readily visible

45
00:02:41,630 --> 00:02:44,330
to the client. And so the heavy lifting has to be done by

46
00:02:44,330 --> 00:02:47,880
the implementer to make that object that

47
00:02:47,880 --> 00:02:50,390
had been instantiated visible on the network.
