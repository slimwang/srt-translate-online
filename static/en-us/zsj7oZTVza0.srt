1
00:00:00,000 --> 00:00:03,000
So this isn't good enough, but we can carry that solution through

2
00:00:03,000 --> 00:00:08,000
and add random nonces to each of these layers, so that's what we're going to do.

3
00:00:08,000 --> 00:00:11,000
The inner message will be the vote concatenated with a random nonce

4
00:00:11,000 --> 00:00:14,000
encrypted with C's public key.

5
00:00:14,000 --> 00:00:18,000
The next layer will be that message concatenated with a new nonce

6
00:00:18,000 --> 00:00:21,000
and encrypted with B's public key.

7
00:00:21,000 --> 00:00:26,000
And the outer layer will be encrypted with A's public key will be this message

8
00:00:26,000 --> 00:00:29,000
concatenated with the third nonce.

9
00:00:29,000 --> 00:00:33,000
So this is the message the voter sends with that voter's vote.

10
00:00:33,000 --> 00:00:38,000
Party A will decrypt the outer layer, randomly permute, and send the result to B

11
00:00:38,000 --> 00:00:43,000
and will decrypt B's layer, randomly permute, and send the result to C

12
00:00:43,000 --> 00:00:45,000
and will decrypt the final vote.

13
00:00:45,000 --> 00:00:51,000
And the first step to validating votes instead of just publishing the v values,

14
00:00:51,000 --> 00:00:56,000
we're going to require that C also publish the r0 values.

15
00:00:56,000 --> 00:01:01,000
So the final tally will be a list of votes and their associated nonces.

16
00:01:01,000 --> 00:01:08,000
This means the voter can check that the nonce that the voter used is in that list.

17
00:01:08,000 --> 00:01:12,000
So if we use this protocol, which of the three parties--

18
00:01:12,000 --> 99:59:59,999
Apple, Blue, or Crazy - would you rather be?
