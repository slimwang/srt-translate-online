1
00:00:00,000 --> 00:00:03,000
Test-case reduction is the process of taking some large input

2
00:00:03,000 --> 00:00:06,000
that triggers a failure and turning it into a small input.

3
00:00:06,000 --> 00:00:09,000
It's usually the case that many bugs can be triggered by small inputs.

4
00:00:09,000 --> 00:00:13,000
On the other hand, it's often the case that, for example, we discover a Firefox crash,

5
00:00:13,000 --> 00:00:16,000
and the web page that causes the Firefox crash might be giant. It's probably huge.

6
00:00:16,000 --> 00:00:20,000
We discover this bug in the wild, and statistically speaking, the pattern in this input

7
00:00:20,000 --> 00:00:24,000
that triggers the Firefox crash just probably isn't going to be found on some small web page.

8
00:00:24,000 --> 00:00:28,000
What we can do is, by hand, figure out what part of the input causes the test case.

9
00:00:28,000 --> 00:00:31,000
One thing we can do is eliminate part of the input.

10
00:00:31,000 --> 00:00:34,000
Sometimes we do this in a smart way.

11
00:00:34,000 --> 00:00:36,000
For example, we might just know that some part of it is unlikely to trigger a crash,

12
00:00:36,000 --> 00:00:40,000
or we might just chop some of it out blindly and see if the smaller input triggers the test case.

13
00:00:40,000 --> 00:00:44,000
If it doesn't, then we got back to our original test case and try again.

14
00:00:44,000 --> 00:00:47,000
If it does, we proceed. Now maybe it's this part.

15
00:00:47,000 --> 00:00:51,000
If we're really lucky, at the very end of this process, we'll end up with a really small test case.

16
00:00:51,000 --> 00:00:55,000
That's the thing we'd like to report to the people developing the software under test.

17
00:00:55,000 --> 00:00:57,000
Of course, even if we're not reporting bugs to someone else--

18
00:00:57,000 --> 00:01:00,000
that is to say, we're finding bugs in software that we wrote--

19
00:01:00,000 --> 00:01:01,000
it's still really nice to have a minimized test case,

20
00:01:01,000 --> 00:01:04,000
because these make it much easier to track down failures.

21
00:01:04,000 --> 00:01:06,000
Option one--manual reduction.

22
00:01:06,000 --> 00:01:08,000
This has been done by people debugging for probably

23
00:01:08,000 --> 00:01:10,000
about as long as computer science has been around.

24
00:01:10,000 --> 00:01:13,000
The second option is really cool. It's a really, really nice technique.

25
00:01:13,000 --> 00:01:17,000
It's called "delta debugging," and it automates this process.

26
00:01:17,000 --> 00:01:22,000
If you can write a program that can tell automatically if a particular input triggers a failure--

27
00:01:22,000 --> 00:01:24,000
that is to say, you load up the webpage in Firefox

28
00:01:24,000 --> 00:01:26,000
and you'll see if it crashes by looking at the exit code that it provides

29
00:01:26,000 --> 00:01:28,000
to the operating system.

30
00:01:28,000 --> 00:01:31,000
Then delta debugging is a framework that takes your script

31
00:01:31,000 --> 00:01:34,000
and takes the test input and automates this process in a loop,

32
00:01:34,000 --> 00:01:37,000
and this loop terminates when the delta debugger,

33
00:01:37,000 --> 00:01:40,000
which has a bunch of heuristics built in for eliminating parts of the input,

34
00:01:40,000 --> 00:01:43,000
it terminates when this delta debugger can't reduce the input anymore.

35
00:01:43,000 --> 00:01:46,000
What I don't want to do is going into this technique in a ton of detail,

36
00:01:46,000 --> 00:01:49,000
because the guy who developed the delta debugging is going

37
00:01:49,000 --> 00:01:51,000
to be teaching a Udacity class sometime soon,

38
00:01:51,000 --> 00:01:53,000
and it's probably going to be really interesting.

39
00:01:53,000 --> 00:01:57,000
What I hope is that I've intrigued you enough that you'll really serious consider taking his class.

40
00:01:57,000 --> 00:02:01,000
It's going to be about debugging. What I'd rather do now is show you an example.
