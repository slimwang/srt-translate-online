1
00:00:00,074 --> 00:00:01,876
So the GPU code will have two parts,

2
00:00:01,876 --> 00:00:05,439
one of which runs on the GPU, one of which runs on the CPU.

3
00:00:05,439 --> 00:00:09,982
So we're going to start by saying what do we have to express in the GPU part of this program.

4
00:00:09,982 --> 00:00:15,488
And we only need to express something very simple, the idea that out = in X in.

5
00:00:15,488 --> 00:00:20,911
Now this kernel that we write for the GPU doesn't say anything about the level of parallelism.

6
00:00:20,911 --> 00:00:24,421
If you remember, kernels look like serial programs.

7
00:00:24,421 --> 00:00:30,707
So the idea of the fact we're going to do this 64 times, not expressed in the GPU program at all.

8
00:00:30,707 --> 00:00:32,088
What does the CPU do?

9
00:00:32,088 --> 00:00:36,335
Well, it has to do the allocation of the memory, copying the data to and from the GPU,

10
00:00:36,335 --> 00:00:40,640
but the important part in terms of the computation is that the CPU launches the kernel.

11
00:00:40,640 --> 00:00:44,204
This is where the parallelism of threads is expressed.

12
00:00:44,204 --> 00:00:48,273
The CPU program will look something like, okay, let's launch a square kernel,

13
00:00:48,273 --> 00:00:52,815
we're going to launch 64 threads, and the arguments to those threads are

14
00:00:52,815 --> 00:00:55,047
an output array and an input array.

15
00:00:55,047 --> 00:00:57,082
Just to get our terminology straight,

16
00:00:57,082 --> 00:01:02,633
what we're doing here is launching a kernel called square kernel on 64 threads

17
00:01:02,633 --> 00:01:07,165
and each of those 64 instances of the kernel will perform one

18
00:01:07,165 --> 00:01:10,473
of the 64 square operations that we need to do.

19
00:01:10,473 --> 00:01:13,643
Now, one question that may be puzzling you is

20
00:01:13,643 --> 00:01:17,544
what good is it to launch 64 instances of the exact same program?

21
00:01:17,544 --> 00:01:19,554
So here's how we answer that question.

22
00:01:19,554 --> 00:01:23,084
Each thread that we launch knows which thread it is.

23
00:01:23,084 --> 00:01:25,128
We're going to call that the thread index.

24
00:01:25,128 --> 00:01:32,095
So if you launched 64 threads, one of them knows it's thread 0, one of them knows it's thread 1, and so on.

25
00:01:32,095 --> 00:01:37,816
Then you can assign thread number n to work on the nth element of the array.

26
00:01:37,816 --> 00:01:39,108
So let's summarize here.

27
00:01:39,108 --> 00:01:43,038
You write your kernel so that it will run on one thread at a time.

28
00:01:43,038 --> 00:01:48,062
Then you will launch many threads, each of which will run that kernel independently.
