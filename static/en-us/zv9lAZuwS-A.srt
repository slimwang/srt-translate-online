1
00:00:00,582 --> 00:00:03,890
I wana focus on a key point that Travis
mentioned about this new outflow.

2
00:00:03,890 --> 00:00:07,670
He said that the credential
checking is done on the website.

3
00:00:07,670 --> 00:00:11,090
Instead of passing usernames and
passwords over the air, the users

4
00:00:11,090 --> 00:00:14,860
are asked to give their consent for an
app to access resources on their behalf.

5
00:00:15,880 --> 00:00:19,420
Behind the scenes,
this interaction can get really complex.

6
00:00:19,420 --> 00:00:21,690
And the standards are always changing.

7
00:00:21,690 --> 00:00:26,010
So I just want to give you a high level
view of what is happening, and why.

8
00:00:26,010 --> 00:00:28,900
>> For many apps you may have
seen are screen like this one.

9
00:00:28,900 --> 00:00:32,940
This is the app Trivia Crack, asking me
for permission to use the Facebook API,

10
00:00:32,940 --> 00:00:35,415
on my user's behalf.

11
00:00:35,415 --> 00:00:38,330
Notice the glaring similarities between
this screen, and the screen for

12
00:00:38,330 --> 00:00:39,940
the movie manager.

13
00:00:39,940 --> 00:00:43,720
In either case, whether I'm selecting OK
here, or Allow here, what's happening

14
00:00:43,720 --> 00:00:47,620
behind the scenes is that both of these
apps are going to be given some type of

15
00:00:47,620 --> 00:00:51,230
request token, that'll allow
them to access user resources.

16
00:00:51,230 --> 00:00:54,810
For instance, if I select OK here,
then I've given consent for

17
00:00:54,810 --> 00:00:58,570
Trivia Crack to use Facebook to
access things like my friends list,

18
00:00:58,570 --> 00:01:00,390
so it can display it in the app.

19
00:01:00,390 --> 00:01:02,880
Some of you maybe asking
the same question that I did,

20
00:01:02,880 --> 00:01:05,680
which is to even get
to this consent form,

21
00:01:05,680 --> 00:01:09,530
doesn't it require me to pass my
credentials over the air at some point?

22
00:01:09,530 --> 00:01:10,220
Yes it does.

23
00:01:10,220 --> 00:01:12,990
However, the main difference is that
your credentials are shared with a third

24
00:01:12,990 --> 00:01:13,960
party.

25
00:01:13,960 --> 00:01:15,390
Instead of your apps.

26
00:01:15,390 --> 00:01:18,520
For example, here the credentials
are shared with Facebook and

27
00:01:18,520 --> 00:01:22,480
a Browser instead of Trivia Crack and
for us the credentials are shared with

28
00:01:22,480 --> 00:01:26,490
the Browser and
TheMovieDB instead of the movie manager.

29
00:01:26,490 --> 00:01:29,510
If you were instead enter your
credentials directly into the app.

30
00:01:29,510 --> 00:01:31,410
Or even worse, store them on the app.

31
00:01:31,410 --> 00:01:33,570
This could be a big security problem.

32
00:01:33,570 --> 00:01:37,180
Instead, this approach takes the
liability away from our apps and puts

33
00:01:37,180 --> 00:01:40,880
them on the third party and the browser,
which are pretty trusted systems.

34
00:01:40,880 --> 00:01:44,080
For the movie manager, we'll use
a UI WebView to handle this process.

35
00:01:45,110 --> 00:01:48,830
Alternatively, one could use Safari
to handle this entire interaction,

36
00:01:48,830 --> 00:01:51,310
where the app opens Safari.

37
00:01:51,310 --> 00:01:54,310
Ask the user for consent and
then we go back to the app, but

38
00:01:54,310 --> 00:01:56,110
we won't take this
approach in this course.
