1
00:00:00,130 --> 00:00:00,980
So that's pretty cool.

2
00:00:00,980 --> 00:00:04,980
So we have an upper bound, that says
that our algorithm is not going to take

3
00:00:04,980 --> 00:00:10,250
any longer than n squared k steps
to explore a deterministic MBP.

4
00:00:10,250 --> 00:00:13,910
And a reasonable question to ask is,
is that good or bad?

5
00:00:13,910 --> 00:00:17,430
And so what I want to argue next
is that there's a lower bound,

6
00:00:17,430 --> 00:00:20,340
saying that no algorithm can do
better than n squared k, and

7
00:00:20,340 --> 00:00:22,190
therefore algorithms
actually doing very well.

8
00:00:22,190 --> 00:00:24,110
>> No.
Well, as well as one can do.

9
00:00:24,110 --> 00:00:25,210
>> As well as one can do, right.

10
00:00:25,210 --> 00:00:26,510
Which may help you well enough.

11
00:00:26,510 --> 00:00:29,335
Now when in fact, really when you're
trying to learn in this kinds of

12
00:00:29,335 --> 00:00:31,880
domains, you don't really want to
make worst case assumptions.

13
00:00:31,880 --> 00:00:34,490
So this is under a worst
case assumptions,

14
00:00:34,490 --> 00:00:36,510
where there's really no
structure in the MBP.

15
00:00:36,510 --> 00:00:40,761
How many mistakes might we make en
route to finding the optimal policy.

16
00:00:40,761 --> 00:00:41,295
>> Okay.

17
00:00:41,295 --> 00:00:43,650
>> All right, so
let me draw a little MBP.

18
00:00:43,650 --> 00:00:46,210
So here's an MBP that we can
call a combination lock.

19
00:00:46,210 --> 00:00:49,780
So the basic idea of this is that we've
got some kind of n state sequence and

20
00:00:49,780 --> 00:00:53,070
two actions,
which I drew as purple and blue here.

21
00:00:53,070 --> 00:00:56,400
And each state has a purple action and
a blue action.

22
00:00:56,400 --> 00:00:58,930
And one of them goes
back to this reset state,

23
00:00:58,930 --> 00:01:02,830
this state number one, while the other
one advances up the chain one step.

24
00:01:02,830 --> 00:01:03,770
>> I see.

25
00:01:03,770 --> 00:01:06,620
>> And so
we need to explore this whole thing say,

26
00:01:06,620 --> 00:01:11,300
because there's some kind of giant
reward over here, and every step that

27
00:01:11,300 --> 00:01:14,690
we're not making along this chain and
then looping around here is a mistake.

28
00:01:14,690 --> 00:01:15,310
So the question is,

29
00:01:15,310 --> 00:01:19,675
how many mistakes might we make en
route to finding this plus 100?

30
00:01:19,675 --> 00:01:22,390
So let's say we start off
in this state number one.

31
00:01:22,390 --> 00:01:25,820
So what would our max do in this case,
Charles?

32
00:01:25,820 --> 00:01:28,810
>> It would pick one of them,
because they look the same.

33
00:01:28,810 --> 00:01:30,090
>> Right, so it's in this state,

34
00:01:30,090 --> 00:01:31,980
it doesn't know anything
about the outgoing actions.

35
00:01:31,980 --> 00:01:35,070
And it knows that there is purple and
blue, and it picks one.

36
00:01:35,070 --> 00:01:39,140
And I tried to be kind of random about
the way which one would go forward and

37
00:01:39,140 --> 00:01:40,020
which one would go backwards so

38
00:01:40,020 --> 00:01:42,390
there's really nothing you
can do other than guess.

39
00:01:42,390 --> 00:01:45,320
If you guess wrong,
then you take this blue action and

40
00:01:45,320 --> 00:01:46,280
end up back in state one.

41
00:01:46,280 --> 00:01:48,540
At which point you would say,
I know what that does,

42
00:01:48,540 --> 00:01:49,740
let me try the purple action.

43
00:01:49,740 --> 00:01:51,340
And now it advances
us to the next state.

44
00:01:51,340 --> 00:01:53,050
>> Right.
>> All right, so what happens from here?

45
00:01:53,050 --> 00:01:55,910
>> Well, you don't know what time
it's going to happen next so

46
00:01:55,910 --> 00:01:56,930
you pick one of them.

47
00:01:56,930 --> 00:01:58,560
>> Right.
So if we choose the purple one we get

48
00:01:58,560 --> 00:02:02,180
reset back to the beginning, at which
point we can kind of march up the chain,

49
00:02:02,180 --> 00:02:05,190
and, you know, get back to where we
have some unknown information and

50
00:02:05,190 --> 00:02:06,550
then try blue.

51
00:02:06,550 --> 00:02:11,110
But basically each time we're exploring
one of these states it's taking us,

52
00:02:11,110 --> 00:02:13,020
well, if you think of it as state i.

53
00:02:13,020 --> 00:02:16,810
To explore state i we take one action,
which resets us back to the beginning

54
00:02:16,810 --> 00:02:19,710
and it takes us i steps
to get back to i.

55
00:02:19,710 --> 00:02:23,320
And then one more to get
to the new state i +1.

56
00:02:23,320 --> 00:02:26,810
So the total number of steps
that we're taking here is

57
00:02:26,810 --> 00:02:31,430
going to be 1 + 2 + 3 + 4,
all the way up to n.

58
00:02:31,430 --> 00:02:33,240
>> Right,
that looks very n squared to me.

59
00:02:33,240 --> 00:02:37,055
>> Which is exactly right,
which is n squarish, as some people say.

60
00:02:37,055 --> 00:02:39,855
And so this total number of steps we
take, it's not literally n squared, but

61
00:02:39,855 --> 00:02:41,695
it's some constant times n squared.

62
00:02:41,695 --> 00:02:43,845
And you can't really
do better than that.

63
00:02:43,845 --> 00:02:46,845
Now in this particular case, we really
wanted to prove a lower bound that was

64
00:02:46,845 --> 00:02:50,245
going to relate it to k times n squared,
where k is the number of actions,

65
00:02:50,245 --> 00:02:51,425
here the number of actions was two.

66
00:02:51,425 --> 00:02:53,785
Do you think the same example
actually kind of scales up for

67
00:02:53,785 --> 00:02:54,645
greater and greater k?

68
00:02:54,645 --> 00:02:57,025
How would you change this example so

69
00:02:57,025 --> 00:03:02,070
that it would basically force us
to do k actions times n squared.

70
00:03:02,070 --> 00:03:04,310
>> Well, I can just make all but
one of them send you back.

71
00:03:04,310 --> 00:03:06,600
>> Yeah, okay, so
let's think about what that would do.

72
00:03:06,600 --> 00:03:10,360
So if we had k actions, one of them sent
us forward and we have no idea which one

73
00:03:10,360 --> 00:03:12,780
and all the other ones send
us back to the beginning.

74
00:03:12,780 --> 00:03:16,620
Then what's going to happen is we're
going to have each time we explore state

75
00:03:16,620 --> 00:03:21,690
i, we're actually going to get reset and
have to take n steps k times.

76
00:03:21,690 --> 00:03:23,500
>> Right.
>> So for each of the n states,

77
00:03:23,500 --> 00:03:27,890
essentially, we're going to have to
explore all the actions and for all but

78
00:03:27,890 --> 00:03:30,860
one of them it's going to be n
steps to get back to where we

79
00:03:30,860 --> 00:03:31,710
are exploring again.

80
00:03:31,710 --> 00:03:33,360
And look at that!

81
00:03:33,360 --> 00:03:35,450
>> That looks like n squared k.

82
00:03:35,450 --> 00:03:36,290
Or Kn squared.

83
00:03:36,290 --> 00:03:39,340
>> Yeah, I just reordered it so that it
looked more like the thing on the top.

84
00:03:39,340 --> 00:03:42,310
>> If you remember from our
last machine learning class,

85
00:03:42,310 --> 00:03:44,530
everything got us back to k and n.

86
00:03:44,530 --> 00:03:47,340
And there you go.
>> Oh!

87
00:03:47,340 --> 00:03:47,864
Nice.

88
00:03:47,864 --> 00:03:48,910
>> It's all the same.

89
00:03:48,910 --> 00:03:51,270
>> It's always k's nearest neighbors,
but in this case, it's not.

90
00:03:51,270 --> 00:03:52,660
>> It's k's farthest neighbors.

91
00:03:52,660 --> 00:03:55,100
>> Well, yeah,
I guess there's some truth in that.

92
00:03:55,100 --> 00:03:58,640
That each time we take an action that we
don't know about, we're getting unlucky,

93
00:03:58,640 --> 00:04:02,610
and we're having to take a very long
trail to get back to where we started.

94
00:04:02,610 --> 00:04:03,480
But no,

95
00:04:03,480 --> 00:04:06,100
I'm just saying k nearest Neighbors
is a particular kind of algorithm.

96
00:04:06,100 --> 00:04:08,760
And here, n doesn't stand for
neighbor here, right?

97
00:04:08,760 --> 00:04:10,090
It stands for number of states.

98
00:04:10,090 --> 00:04:12,390
>> I prefer to think that n stands for
neighbor in this case.

99
00:04:12,390 --> 00:04:14,830
>> Great, okay, then I think
we've got this one under control.

100
00:04:14,830 --> 00:04:18,399
So that's the argument that I
wanted to make there is that

101
00:04:18,399 --> 00:04:22,610
we really do have to take kn squared in
the worst case in a deterministic NBP,

102
00:04:22,610 --> 00:04:25,850
to figure out what's going on and
stop making mistakes.

103
00:04:25,850 --> 00:04:27,760
>> Yeah, and there's no error on it,
because this is like, well,

104
00:04:27,760 --> 00:04:28,920
it really is a combination lock.

105
00:04:28,920 --> 00:04:32,330
The way you draw it it's a random
binary string that gets you to the end.

106
00:04:32,330 --> 00:04:35,660
Unless you get extremely lucky,
there's no way to figure out

107
00:04:35,660 --> 00:04:38,270
what it is without trying all
the combinations, sort of.

108
00:04:38,270 --> 00:04:39,610
>> Well, it's not all the combinations.

109
00:04:39,610 --> 00:04:42,730
So combination lock in some ways
is actually not a great name here,

110
00:04:42,730 --> 00:04:46,600
so in particular, what makes it
a combination lock is to make it

111
00:04:46,600 --> 00:04:48,410
across this whole chain of end things.

112
00:04:48,410 --> 00:04:50,250
You have to choose the right color and
sequence.

113
00:04:50,250 --> 00:04:53,569
You have to choose, in this case,
purple, blue, purple, purple, blue,

114
00:04:53,569 --> 00:04:54,808
blue, blue, blue, blue.

115
00:04:54,808 --> 00:04:56,650
So you have to kind of crack the lock.

116
00:04:56,650 --> 00:04:58,740
>> Right.
>> In a real combination lock,

117
00:04:58,740 --> 00:05:01,360
if you get any of these wrong,
at the end of it,

118
00:05:01,360 --> 00:05:03,820
you don't get to find out which ones
were right and which ones were wrong.

119
00:05:03,820 --> 00:05:06,380
You get reset back to the beginning and
you just have to start again.

120
00:05:06,380 --> 00:05:10,950
So you really end up taking like number
of actions to the number of states.

121
00:05:10,950 --> 00:05:12,740
>> Right.
>> Different combinations.

122
00:05:12,740 --> 00:05:16,430
Here we're lucky enough to
actually know, hey, the first

123
00:05:16,430 --> 00:05:20,510
i parts of our combination are correct,
and we're just guessing the ith one.

124
00:05:20,510 --> 00:05:22,270
>> So really,
it's a sequential combination lock.

125
00:05:22,270 --> 00:05:26,040
>> Yeah, which is not very secure from
a, I don't know, security standpoint.

126
00:05:26,040 --> 00:05:28,940
>> Well, in particular you can
solve it in n squared time

127
00:05:28,940 --> 00:05:30,320
instead of k to the n time.

128
00:05:30,320 --> 00:05:31,560
>> Right, so n squared doesn't sound so

129
00:05:31,560 --> 00:05:33,180
bad if you're comparing
it to k to the n.

130
00:05:33,180 --> 00:05:33,855
>> Right.
>> But anyway,

131
00:05:33,855 --> 00:05:37,420
[LAUGH] the point is that
we can't get around that.

132
00:05:37,420 --> 00:05:39,600
And so
that's really what I wanted you to do.

133
00:05:39,600 --> 00:05:43,660
So the next thing I want to talk about
is combining this idea with the bandit

134
00:05:43,660 --> 00:05:47,590
idea that we talked about earlier,
and get an algorithm for general MDPs.

135
00:05:47,590 --> 00:05:48,090
>> Okay.
