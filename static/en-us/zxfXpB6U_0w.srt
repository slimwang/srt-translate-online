1
00:00:00,330 --> 00:00:03,630
So we seen a few examples measuring the time of execution of

2
00:00:03,630 --> 00:00:07,320
toy programs, of a loop that does nothing. What we care about though

3
00:00:07,320 --> 00:00:11,440
is the time of execution of our index encode, so what I'm

4
00:00:11,440 --> 00:00:14,610
going to do next is write a program to be able to test the

5
00:00:14,610 --> 00:00:17,580
time of execution of indexing code. To get a good test we

6
00:00:17,580 --> 00:00:19,650
need to make a big index, we need to fill up an index

7
00:00:19,650 --> 00:00:22,440
with lots and lots of words, and we can do that by hand;

8
00:00:22,440 --> 00:00:25,430
that would take a lot of time and effort. So what I'm going to

9
00:00:25,430 --> 00:00:28,054
do instead, is to find a procedure that makes a

10
00:00:28,054 --> 00:00:31,430
big index. So what it does is take in, a size,

11
00:00:31,430 --> 00:00:34,370
and then it's going to, fill up an index with that

12
00:00:34,370 --> 00:00:37,060
number of words. To fill up the index with that number

13
00:00:37,060 --> 00:00:39,540
of keywords, we need to generate different words. So what

14
00:00:39,540 --> 00:00:42,828
I've done is created a variable called letters, that is initially

15
00:00:42,828 --> 00:00:46,960
is all A's. And as we go through the loop, we

16
00:00:46,960 --> 00:00:50,450
go through the loop size number of times. We keep making

17
00:00:50,450 --> 00:00:53,613
a new string. We add that string to the next, I'll

18
00:00:53,613 --> 00:00:57,055
explain what make_string does later. We add that string to the

19
00:00:57,055 --> 00:00:59,730
index, then we change the letters. And we're

20
00:00:59,730 --> 00:01:05,519
going to keep increasing the letter once we get to z, we wrap around. For now

21
00:01:05,519 --> 00:01:08,530
it's not too important to understand everything in this code, but

22
00:01:08,530 --> 00:01:10,110
I do want to walk through the code a little bit.

23
00:01:10,110 --> 00:01:12,550
So what this loop is doing is going through all the

24
00:01:12,550 --> 00:01:15,825
positions and the letters are A and we filled this up with

25
00:01:15,825 --> 00:01:19,420
eight different elements and we're going to go through those elements starting

26
00:01:19,420 --> 00:01:23,130
from the last one going backwards, so this range loop goes from

27
00:01:23,130 --> 00:01:25,840
the length minus 1 to 0, stepping by negative 1. We

28
00:01:25,840 --> 00:01:29,750
are going to check each letter. If the letter is less than z,

29
00:01:29,750 --> 00:01:31,790
that means we can increase and we are going to increase it

30
00:01:31,790 --> 00:01:35,410
using this code here and I'll talk soon about the code that

31
00:01:35,410 --> 00:01:38,160
turns letters into numbers, but what this expression does is get

32
00:01:38,160 --> 00:01:41,340
the next letter. So if the letter was an a the result

33
00:01:41,340 --> 00:01:44,530
after this will be a b, and we're going to replace the

34
00:01:44,530 --> 00:01:48,260
letter at that position in the letters list, with the next

35
00:01:48,260 --> 00:01:50,670
letter. If the letter is a z, we don't want to go

36
00:01:50,670 --> 00:01:53,350
beyond the alphabet, so instead, we're going to set that letter to

37
00:01:53,350 --> 00:01:56,350
a, and we're going to go back through the loop to find

38
00:01:56,350 --> 00:01:58,830
the next letter. Once we found one less than z, we

39
00:01:58,830 --> 00:02:02,110
break, we only need to change one letter. What the make_string

40
00:02:02,110 --> 00:02:07,000
procedure does, that we call here. Is just turn that array into

41
00:02:07,000 --> 00:02:09,880
one string. So it's going through the elements of P which

42
00:02:09,880 --> 00:02:13,360
is this list of letters that keeps changing. And concatenating all those

43
00:02:13,360 --> 00:02:16,320
letters into one string. So the whole point of this is to

44
00:02:16,320 --> 00:02:19,390
allow us to easily make big indexes so we can run tests

45
00:02:19,390 --> 00:02:23,450
on different size indexes. So let's try this in the Python shell.

46
00:02:23,450 --> 00:02:25,750
First I'll show you what the result is when we use make

47
00:02:25,750 --> 00:02:28,875
big index. We'll start with a fairly small one, so I'm passing

48
00:02:28,875 --> 00:02:32,100
three is the size. What make big index gives us is an

49
00:02:32,100 --> 00:02:37,980
index with three keywords: aaaaaaaa, aaaaaaab, aaaaaaac and for

50
00:02:37,980 --> 00:02:40,300
each of them there's one url which is the name

51
00:02:40,300 --> 00:02:43,720
fake. If we passing in a bigger value, this

52
00:02:43,720 --> 00:02:46,950
will have an index with a hundred keywords, so we're

53
00:02:46,950 --> 00:02:48,940
going to passing a hundred is the size, we get

54
00:02:48,940 --> 00:02:50,910
this big index, and you can see it's starting to

55
00:02:50,910 --> 00:02:54,430
change the second from the last letter. To make sure

56
00:02:54,430 --> 00:02:56,910
that each word is a different word than the next.

57
00:02:56,910 --> 00:02:58,730
So, what we want to do now is look at

58
00:02:58,730 --> 00:03:02,760
how the time of executions take for different size indexes. So,

59
00:03:02,760 --> 00:03:06,520
let's make a really big index. So what we're going to do,

60
00:03:06,520 --> 00:03:10,540
we'll make an index of size 10,000. And remember, our concern

61
00:03:10,540 --> 00:03:13,080
is the time for lookups. It's the operation that's going to happen

62
00:03:13,080 --> 00:03:16,090
most frequently. So we're not timing the time to make the

63
00:03:16,090 --> 00:03:18,590
big index. Let's see what the time is to do a

64
00:03:18,590 --> 00:03:21,970
lookup, and so I'll time the execution of looking up in

65
00:03:21,970 --> 00:03:26,530
index 10,000 the keyword, and the word makes

66
00:03:26,530 --> 00:03:28,860
a difference. So, first let's try looking up

67
00:03:28,860 --> 00:03:32,550
the word udacity. Which, sadly, is not in

68
00:03:32,550 --> 00:03:35,260
our index. We'd need a much bigger index

69
00:03:35,260 --> 00:03:42,218
to get up to udacity. And the time of execution is shown here. So, it's 0.0008

70
00:03:42,218 --> 00:03:44,880
seconds. So, still getting close to a millisecond,

71
00:03:44,880 --> 00:03:47,950
but still quite fast. Let's make a bigger index.

72
00:03:47,950 --> 00:03:50,770
This time we have a 100,000 keywords. going to take

73
00:03:50,770 --> 00:03:52,660
a little longer to make it, but we're not

74
00:03:52,660 --> 00:03:54,932
worrying about the time to make it now. What

75
00:03:54,932 --> 00:03:56,560
we care is the time to do a look up.

76
00:03:58,910 --> 00:04:03,020
So that took a long time. Let's see how, many entries there are, so we can look

77
00:04:03,020 --> 00:04:08,990
at the very last element in our index. And we can see got to aaaafryd,

78
00:04:08,990 --> 00:04:14,170
which I don't know to pronounce. Another way to see that, which

79
00:04:14,170 --> 00:04:16,140
we didn't talk about yet, we can actually index from the

80
00:04:16,140 --> 00:04:18,579
back using negative numbers, so if you use negative 1 as

81
00:04:18,579 --> 00:04:21,190
the index, that will give us the last entry in the

82
00:04:21,190 --> 00:04:24,360
list. So, now we'll try doing a timed execution. We're going to

83
00:04:24,360 --> 00:04:26,920
look up in the 10,000 size index. And we'll

84
00:04:26,920 --> 00:04:29,680
see the time's pretty similar to what it was before,

85
00:04:29,680 --> 00:04:31,300
that time might vary a little bit, let's try

86
00:04:31,300 --> 00:04:34,390
it once more, and again, it's just under a millisecond.

87
00:04:34,390 --> 00:04:38,212
So now, we'll try, instead of the 10,000 index,

88
00:04:38,212 --> 00:04:42,736
looking up in the 100,000 length index, the same look-up,

89
00:04:42,736 --> 00:04:44,920
and we see that the time is now 10

90
00:04:44,920 --> 00:04:49,366
times that, so it's now about 8.6 milliseconds whereas before

91
00:04:49,366 --> 00:04:55,330
it was 0.9 milliseconds. And let's, for consistency, try that again.

92
00:04:55,330 --> 00:04:57,480
We'll note that these timings vary a little bit, each time

93
00:04:57,480 --> 00:05:00,020
we do it. And there's lots of reasons why the timing

94
00:05:00,020 --> 00:05:03,490
varies. We're running lots of other things on the computer at the

95
00:05:03,490 --> 00:05:06,970
same time. So it's not the case that we have total

96
00:05:06,970 --> 00:05:09,590
control over the processor and are running exactly the same thing every

97
00:05:09,590 --> 00:05:11,800
time. Because all of the other programs might be doing other

98
00:05:11,800 --> 00:05:14,370
things. The other reason the time can vary is where things are

99
00:05:14,370 --> 00:05:17,600
in memory. Sometime it's very quick to look up a

100
00:05:17,600 --> 00:05:20,690
value in memory, sometimes it takes longer. And we're not going to

101
00:05:20,690 --> 00:05:23,530
talk about the details of that. What matters is that, that

102
00:05:23,530 --> 00:05:26,820
the time's roughly the same, each time we execute it. And

103
00:05:26,820 --> 00:05:30,760
it really depends on the size of the input, in this

104
00:05:30,760 --> 00:05:33,240
case it's the size of the input table. So when we

105
00:05:33,240 --> 00:05:36,106
increase the size of the table to have 100,000 entires, it's

106
00:05:36,106 --> 00:05:39,840
about 10 times as slow as when we had 10,000 entries.

107
00:05:39,840 --> 00:05:43,450
So now let's have a few quizzes to see if you can guess how these timings work.
