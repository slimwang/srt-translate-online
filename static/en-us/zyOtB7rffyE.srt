1
00:00:00,170 --> 00:00:02,850
So to do that, we have to think about

2
00:00:02,850 --> 00:00:07,510
pictures as of not just a collection
of pixels, but actually as a graph.

3
00:00:07,510 --> 00:00:10,390
And what I mean by
a graph is shown here.

4
00:00:10,390 --> 00:00:16,450
So, in the graph we have a,
a node for every pixel, okay?

5
00:00:16,450 --> 00:00:20,530
And between every pair of
pixels is a link, okay?

6
00:00:22,020 --> 00:00:26,320
Just as in any other graph,
those are the edges of our graph, right?

7
00:00:26,320 --> 00:00:30,890
And on each edge, there's what's
referred to as an affinity weight, or

8
00:00:30,890 --> 00:00:35,930
just a weight, and
here that's written as wpq, all right?

9
00:00:35,930 --> 00:00:38,827
And the idea is that I'm
going to need an edge for

10
00:00:38,827 --> 00:00:41,125
any weight that is nonzero, okay?

11
00:00:41,125 --> 00:00:47,042
And the weight is going to measure
the similarity between two pixels.

12
00:00:47,042 --> 00:00:50,908
And the two, and the similarity will be
essentially inversely proportional to

13
00:00:50,908 --> 00:00:52,110
the difference.

14
00:00:52,110 --> 00:00:55,140
So that just means that the,
the more different they are,

15
00:00:55,140 --> 00:00:56,520
the less similar they are.

16
00:00:56,520 --> 00:00:58,650
And another way of saying it is
if the difference is too big,

17
00:00:58,650 --> 00:01:00,280
I'm going to say the similarity is zero.

18
00:01:00,280 --> 00:01:02,120
So those edges go away.

19
00:01:02,120 --> 00:01:05,590
So I'm going to build a,
a weight matrix, using this affinity.

20
00:01:05,590 --> 00:01:07,510
So I, a standard affinity, for

21
00:01:07,510 --> 00:01:10,750
example, might be that I'm just
going to use a Gaussian, right?

22
00:01:10,750 --> 00:01:14,440
Where I say the,
the affinity between two pixels, i and

23
00:01:14,440 --> 00:01:18,970
j, is just this exponentiation,
as a function,

24
00:01:18,970 --> 00:01:21,870
just as exponentiation as
a function of the distance.

25
00:01:21,870 --> 00:01:24,120
So of course, there is a parameter here.

26
00:01:24,120 --> 00:01:28,029
And here, you can see the change in
affinity depending upon what that

27
00:01:28,029 --> 00:01:30,500
parameter is you get
these different curves.

28
00:01:30,500 --> 00:01:36,740
And essentially if you use a very small
sigma this thing goes, grows quickly.

29
00:01:36,740 --> 00:01:40,410
So in which case, only nearby pixels
get any reasonable affinity at all.

30
00:01:40,410 --> 00:01:42,630
Whereas if you have a large sigma,
you can connect,

31
00:01:42,630 --> 00:01:45,690
you can have strong infinities in
between points that are somewhat far

32
00:01:45,690 --> 00:01:48,480
away, far away in your distance space.

33
00:01:48,480 --> 00:01:52,030
So if your distance includes just color,
then it would be that.

34
00:01:52,030 --> 00:01:55,020
But typically, our distance is also
going to include actual distance.
